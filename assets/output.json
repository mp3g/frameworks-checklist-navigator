[
    {
        "id": "D01",
        "title": "Application Security",
        "description": "Application security involves protecting software applications from threats throughout their lifecycle, from development to deployment. This includes identifying and fixing vulnerabilities, implementing secure coding practices, and using tools like firewalls and encryption to prevent unauthorized access and data breaches",
        "areas": [
            {
                "id": "A02",
                "title": "API and Web Service",
                "description": "API security refers to the practices and procedures that protect application programming interfaces (APIs) from misuse, malicious bot attacks and other cybersecurity threats.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Generic Web Service Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that all application components use the same encodings and parsers to avoid parsing attacks that exploit different URI or file parsing behavior that could be used in SSRF and RFI attacks.",
                            "Verify API URLs do not expose sensitive information, such as the API key, session tokens etc.",
                            "Verify that authorization decisions are made at both the URI, enforced by programmatic or declarative security at the controller or router, and at the resource level, enforced by model-based permissions.",
                            "Verify that requests containing unexpected or missing content types are rejected with appropriate headers (HTTP response status 406 Unacceptable or 415 Unsupported Media Type)."
                        ]
                    },
                    {
                        "title": "GraphQL",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "Verify that a query allow list or a combination of depth limiting and amount limiting is used to prevent GraphQL or data layer expression Denial of Service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used.",
                        "mitigation_measures": [
                            "Verify that a query allow list or a combination of depth limiting and amount limiting is used to prevent GraphQL or data layer expression Denial of Service (DoS) as a result of expensive, nested queries. For more advanced scenarios, query cost analysis should be used.",
                            "Verify that GraphQL or other data layer authorization logic should be implemented at the business logic layer instead of the GraphQL layer."
                        ]
                    },
                    {
                        "title": "RESTful Web Service",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that enabled RESTful HTTP methods are a valid choice for the user or action, such as preventing normal users using DELETE or PUT on protected API or resources.",
                            "Verify that JSON schema validation is in place and verified before accepting input.",
                            "Verify that RESTful web services that utilize cookies are protected from Cross-Site Request Forgery via the use of at least one or more of the following: double submit cookie pattern, CSRF nonces, or Origin request header checks.",
                            "Verify that REST services explicitly check the incoming Content-Type to be the expected one, such as application/xml or application/json.",
                            "Verify that the message headers and payload are trustworthy and not modified in transit. Requiring strong encryption for transport (TLS only) may be sufficient in many cases as it provides both confidentiality and integrity protection. Per-message digital signatures can provide additional assurance on top of the transport protections for high-security applications but bring with them additional complexity and risks to weigh against the benefits."
                        ]
                    },
                    {
                        "title": "SOAP Web Service",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that XSD schema validation takes place to ensure a properly formed XML document, followed by validation of each input field before any processing of that data takes place.",
                            "Verify that the message payload is signed using WS-Security to ensure reliable transport between client and service."
                        ]
                    }
                ]
            },
            {
                "id": "A39",
                "title": "Session Management",
                "description": "Session management involves securely handling user sessions to prevent unauthorized access. This includes using secure session tokens, timeouts, and proper session termination practices",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Cookie-based Session Management",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that cookie-based session tokens have the 'Secure' attribute set. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that cookie-based session tokens have the 'HttpOnly' attribute set. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that cookie-based session tokens utilize the 'SameSite' attribute to limit exposure to cross-site request forgery attacks. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that cookie-based session tokens use the \"__Host-\" prefix so cookies are only sent to the host that initially set the cookie.",
                            "Verify that if the application is published under a domain name with other applications that set or use session cookies that might disclose the session cookies, set the path attribute in cookie-based session tokens using the most precise path possible. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Defenses Against Session Management Exploits",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the application ensures a full, valid login session or requires re-authentication or secondary verification before allowing any sensitive transactions or account modifications."
                        ]
                    },
                    {
                        "title": "Federated Re-authentication",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that Relying Parties (RPs) specify the maximum authentication time to Credential Service Providers (CSPs) and that CSPs re-authenticate the user if they haven't used a session within that period.",
                            "Verify that Credential Service Providers (CSPs) inform Relying Parties (RPs) of the last authentication event, to allow RPs to determine if they need to re-authenticate the user."
                        ]
                    },
                    {
                        "title": "Fundamental Session Management Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the application never reveals session tokens in URL parameters."
                        ]
                    },
                    {
                        "title": "Session Binding",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the application generates a new session token on user authentication. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that session tokens possess at least 64 bits of entropy. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify the application only stores session tokens in the browser using secure methods such as appropriately secured cookies (see section 3.4) or HTML 5 session storage.",
                            "Verify that session tokens are generated using approved cryptographic algorithms. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Session Termination",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that logout and expiration invalidate the session token, such that the back button or a downstream relying party does not resume an authenticated session, including across relying parties. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "If authenticators permit users to remain logged in, verify that re-authentication occurs periodically both when actively used or after an idle period. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application gives the option to terminate all other active sessions after a successful password change (including change via password reset/recovery), and that this is effective across the application, federated login (if present), and any relying parties.",
                            "Verify that users are able to view and (having re-entered login credentials) log out of any or all currently active sessions and devices."
                        ]
                    },
                    {
                        "title": "Token-based Session Management",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the application allows users to revoke OAuth tokens that form trust relationships with linked applications.",
                            "Verify the application uses session tokens rather than static API secrets and keys, except with legacy implementations.",
                            "Verify that stateless session tokens use digital signatures, encryption, and other countermeasures to protect against tampering, enveloping, replay, null cipher, and key substitution attacks."
                        ]
                    }
                ]
            },
            {
                "id": "A43",
                "title": "Validation, Sanitization and Encoding",
                "description": "These practices involve ensuring that input data is properly validated, sanitized, and encoded to prevent injection attacks and other vulnerabilities. This helps maintain data integrity and security",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Algorithms",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "Use of sufficiently secure algorithms approved by international organizations and standards",
                        "mitigation_measures": [
                            "Verify that all cryptographic modules fail securely, and errors are handled in a way that does not enable Padding Oracle attacks.",
                            "Verify that industry proven or government approved cryptographic algorithms, modes, and libraries are used, instead of custom coded cryptography. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that encryption initialization vector, cipher configuration, and block modes are configured securely using the latest advice.",
                            "Verify that random number, encryption or hashing algorithms, key lengths, rounds, ciphers or modes, can be reconfigured, upgraded, or swapped at any time, to protect against cryptographic breaks. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that known insecure block modes (i.e. ECB, etc.), padding modes (i.e. PKCS#1 v1.5, etc.), ciphers with small block sizes (i.e. Triple-DES, Blowfish, etc.), and weak hashing algorithms (i.e. MD5, SHA1, etc.) are not used unless required for backwards compatibility.",
                            "Verify that nonces, initialization vectors, and other single use numbers must not be used more than once with a given encryption key. The method of generation must be appropriate for the algorithm being used.",
                            "Verify that encrypted data is authenticated via signatures, authenticated cipher modes, or HMAC to ensure that ciphertext is not altered by an unauthorized party.",
                            "Verify that all cryptographic operations are constant-time, with no 'short-circuit' operations in comparisons, calculations, or returns, to avoid leaking information."
                        ]
                    },
                    {
                        "title": "Deserialization Prevention",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that serialized objects use integrity checks or are encrypted to prevent hostile object creation or data tampering. ([C5](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application correctly restricts XML parsers to only use the most restrictive configuration possible and to ensure that unsafe features such as resolving external entities are disabled to prevent XML eXternal Entity (XXE) attacks.",
                            "Verify that deserialization of untrusted data is avoided or is protected in both custom code and third-party libraries (such as JSON, XML and YAML parsers).",
                            "Verify that when parsing JSON in browsers or JavaScript-based backends, JSON.parse is used to parse the JSON document. Do not use eval() to parse JSON."
                        ]
                    },
                    {
                        "title": "Input Validation",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application has defenses against HTTP parameter pollution attacks, particularly if the application framework makes no distinction about the source of request parameters (GET, POST, cookies, headers, or environment variables).",
                            "Verify that frameworks protect against mass parameter assignment attacks, or that the application has countermeasures to protect against unsafe parameter assignment, such as marking fields private or similar. ([C5](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that all input (HTML form fields, REST requests, URL parameters, HTTP headers, cookies, batch files, RSS feeds, etc) is validated using positive validation (allow lists). ([C5](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that structured data is strongly typed and validated against a defined schema including allowed characters, length and pattern (e.g. credit card numbers, e-mail addresses, telephone numbers, or validating that two related fields are reasonable, such as checking that suburb and zip/postcode match). ([C5](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that URL redirects and forwards only allow destinations which appear on an allow list, or show a warning when redirecting to potentially untrusted content."
                        ]
                    },
                    {
                        "title": "Memory, String, and Unmanaged Code",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application uses memory-safe string, safer memory copy and pointer arithmetic to detect or prevent stack, buffer, or heap overflows.",
                            "Verify that format strings do not take potentially hostile input, and are constant.",
                            "Verify that sign, range, and input validation techniques are used to prevent integer overflows."
                        ]
                    },
                    {
                        "title": "Output Encoding and Injection Prevention",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that output encoding is relevant for the interpreter and context required. For example, use encoders specifically for HTML values, HTML attributes, JavaScript, URL parameters, HTTP headers, SMTP, and others as the context requires, especially from untrusted inputs (e.g. names with Unicode or apostrophes, such as \u00e3\u0081\u00ad\u00e3\u0081\u201c or O'Hara). ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that output encoding preserves the user's chosen character set and locale, such that any Unicode character point is valid and safely handled. ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that context-aware, preferably automated - or at worst, manual - output escaping protects against reflected, stored, and DOM based XSS. ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that data selection or database queries (e.g. SQL, HQL, ORM, NoSQL) use parameterized queries, ORMs, entity frameworks, or are otherwise protected from database injection attacks. ([C3](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that where parameterized or safer mechanisms are not present, context-specific output encoding is used to protect against injection attacks, such as the use of SQL escaping to protect against SQL injection. ([C3, C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application protects against JSON injection attacks, JSON eval attacks, and JavaScript expression evaluation. ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application protects against LDAP injection vulnerabilities, or that specific security controls to prevent LDAP injection have been implemented. ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application protects against OS command injection and that operating system calls use parameterized OS queries or use contextual command line output encoding. ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application protects against Local File Inclusion (LFI) or Remote File Inclusion (RFI) attacks.",
                            "Verify that the application protects against XPath injection or XML injection attacks. ([C4](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Sanitization and Sandboxing",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that all untrusted HTML input from WYSIWYG editors or similar is properly sanitized with an HTML sanitizer library or framework feature. ([C5](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that unstructured data is sanitized to enforce safety measures such as allowed characters and length.",
                            "Verify that the application sanitizes user input before passing to mail systems to protect against SMTP or IMAP injection.",
                            "Verify that the application avoids the use of eval() or other dynamic code execution features. Where there is no alternative, any user input being included must be sanitized or sandboxed before being executed.",
                            "Verify that the application protects against template injection attacks by ensuring that any user input being included is sanitized or sandboxed.",
                            "Verify that the application protects against SSRF attacks, by validating or sanitizing untrusted data or HTTP file metadata, such as filenames and URL input fields, and uses allow lists of protocols, domains, paths and ports.",
                            "Verify that the application sanitizes, disables, or sandboxes user-supplied Scalable Vector Graphics (SVG) scriptable content, especially as they relate to XSS resulting from inline scripts, and foreignObject.",
                            "Verify that the application sanitizes, disables, or sandboxes user-supplied scriptable or expression template language content, such as Markdown, CSS or XSL stylesheets, BBCode, or similar."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D02",
        "title": "Authorization & Authentication",
        "description": "The Authorization & Authentication dimension compiles all configurations related to the access and privileges of users to both platforms and applications. These configurations will be based on the minimum privilege principle, which ensures security limiting the privileges of users to the necessary minimum.\nAuthentication verifies the identity of a user, device, or system before granting access, ensuring that the entity is who it claims to be. \nAuthorization determines what resources and actions the authenticated entity is permitted to access or perform, based on predefined permissions",
        "areas": [
            {
                "id": "A01",
                "title": "Access Control",
                "description": "A set of rules and configurations related to the access and privileges of users of both platforms and applications. These configurations will be based on the minimum privilege principle, which ensures security limiting the privileges of users to the necessary minimum. Access Control includes Authorization strategies such as RBAC, SSO via SAML, OpenID, etc. ",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Access Control Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that trusted enforcement points, such as access control gateways, servers, and serverless functions, enforce access controls. Never enforce access controls on the client.",
                            "Verify the application uses a single and well-vetted access control mechanism for accessing protected data and resources. All requests must pass through this single mechanism to avoid copy and paste or insecure alternative paths. ([C7](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles. ([C7](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "General Access Control Design",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application enforces access control rules on a trusted service layer, especially if client-side access control is present and could be bypassed.",
                            "Verify that all user and data attributes and policy information used by access controls cannot be manipulated by end users unless specifically authorized.",
                            "Verify that the principle of least privilege exists - users should only be able to access functions, data files, URLs, controllers, services, and other resources, for which they possess specific authorization. This implies protection against spoofing and elevation of privilege. ([C7](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that access controls fail securely including when an exception occurs. ([C10](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Operation Level Access Control",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that sensitive data and APIs are protected against Insecure Direct Object Reference (IDOR) attacks targeting creation, reading, updating and deletion of records, such as creating or updating someone else's record, viewing everyone's records, or deleting all records.",
                            "Verify that the application or framework enforces a strong anti-CSRF mechanism to protect authenticated functionality, and effective anti-automation or anti-CSRF protects unauthenticated functionality."
                        ]
                    },
                    {
                        "title": "Other Access Control Considerations",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify administrative interfaces use appropriate multi-factor authentication to prevent unauthorized use.",
                            "Verify that directory browsing is disabled unless deliberately desired. Additionally, applications should not allow discovery or disclosure of file or directory metadata, such as Thumbs.db, .DS_Store, .git or .svn folders.",
                            "Verify the application has additional authorization (such as step up or adaptive authentication) for lower value systems, and / or segregation of duties for high value applications to enforce anti-fraud controls as per the risk of application and past fraud."
                        ]
                    }
                ]
            },
            {
                "id": "A06",
                "title": "Authentication",
                "description": "Authentication is the process of verifying the identity of users, devices, or systems before granting access to resources. It includes methods like passwords, biometrics, and multi-factor authentication to ensure only authorized entities can access sensitive data",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Authentication Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the use of unique or special low-privilege operating system accounts for all application components, services, and servers. ([C3](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that communications between application components, including APIs, middleware and data layers, are authenticated. Components should have the least necessary privileges needed. ([C3](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application uses a single vetted authentication mechanism that is known to be secure, can be extended to include strong authentication, and has sufficient logging and monitoring to detect account abuse or breaches.",
                            "Verify that all authentication pathways and identity management APIs implement consistent authentication security control strength, such that there are no weaker alternatives per the risk of the application."
                        ]
                    },
                    {
                        "title": "Authenticator Lifecycle",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify system generated initial passwords or activation codes SHOULD be securely randomly generated, SHOULD be at least 6 characters long, and MAY contain letters and numbers, and expire after a short period of time. These initial secrets must not be permitted to become the long term password.",
                            "Verify that enrollment and use of user-provided authentication devices are supported, such as a U2F or FIDO tokens.",
                            "Verify that renewal instructions are sent with sufficient time to renew time bound authenticators."
                        ]
                    },
                    {
                        "title": "Browser Session Hijacking",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "This may be a difficult technique to detect because adversary traffic may be masked by normal user traffic. New processes may not be created and no additional software dropped to disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for [Process Injection](https://attack.mitre.org/techniques/T1055) against browser applications."
                        ]
                    },
                    {
                        "title": "Credential Recovery",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that a system generated initial activation or recovery secret is not sent in clear text to the user. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify password hints or knowledge-based authentication (so-called \"secret questions\") are not present.",
                            "Verify password credential recovery does not reveal the current password in any way. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify shared or default accounts are not present (e.g. \"root\", \"admin\", or \"sa\").",
                            "Verify that if an authentication factor is changed or replaced, that the user is notified of this event.",
                            "Verify forgotten password, and other recovery paths use a secure recovery mechanism, such as time-based OTP (TOTP) or other soft token, mobile push, or another offline recovery mechanism. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that if OTP or multi-factor authentication factors are lost, that evidence of identity proofing is performed at the same level as during enrollment."
                        ]
                    },
                    {
                        "title": "Credential Storage",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that passwords are stored in a form that is resistant to offline attacks. Passwords SHALL be salted and hashed using an approved one-way key derivation or password hashing function. Key derivation and password hashing functions take a password, a salt, and a cost factor as inputs when generating a password hash. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the salt is at least 32 bits in length and be chosen arbitrarily to minimize salt value collisions among stored hashes. For each credential, a unique salt value and the resulting hash SHALL be stored. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that if PBKDF2 is used, the iteration count SHOULD be as large as verification server performance will allow, typically at least 100,000 iterations. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that if bcrypt is used, the work factor SHOULD be as large as verification server performance will allow, with a minimum of 10. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that an additional iteration of a key derivation function is performed, using a salt value that is secret and known only to the verifier. Generate the salt value using an approved random bit generator [SP 800-90Ar1] and provide at least the minimum security strength specified in the latest revision of SP 800-131A. The secret salt value SHALL be stored separately from the hashed passwords (e.g., in a specialized device like a hardware security module)."
                        ]
                    },
                    {
                        "title": "Cryptographic Verifier",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that cryptographic keys used in verification are stored securely and protected against disclosure, such as using a Trusted Platform Module (TPM) or Hardware Security Module (HSM), or an OS service that can use this secure storage.",
                            "Verify that the challenge nonce is at least 64 bits in length, and statistically unique or unique over the lifetime of the cryptographic device.",
                            "Verify that approved cryptographic algorithms are used in the generation, seeding, and verification."
                        ]
                    },
                    {
                        "title": "General Authenticator Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that anti-automation controls are effective at mitigating breached credential testing, brute force, and account lockout attacks. Such controls include blocking the most common breached passwords, soft lockouts, rate limiting, CAPTCHA, ever increasing delays between attempts, IP address restrictions, or risk-based restrictions such as location, first login on a device, recent attempts to unlock the account, or similar. Verify that no more than 100 failed attempts per hour is possible on a single account.",
                            "Verify that the use of weak authenticators (such as SMS and email) is limited to secondary verification and transaction approval and not as a replacement for more secure authentication methods. Verify that stronger methods are offered before weak methods, users are aware of the risks, or that proper measures are in place to limit the risks of account compromise.",
                            "Verify that secure notifications are sent to users after updates to authentication details, such as credential resets, email or address changes, logging in from unknown or risky locations. The use of push notifications - rather than SMS or email - is preferred, but in the absence of push notifications, SMS or email is acceptable as long as no sensitive information is disclosed in the notification.",
                            "Verify impersonation resistance against phishing, such as the use of multi-factor authentication, cryptographic devices with intent (such as connected keys with a push to authenticate), or at higher AAL levels, client-side certificates.",
                            "Verify that where a Credential Service Provider (CSP) and the application verifying authentication are separated, mutually authenticated TLS is in place between the two endpoints.",
                            "Verify replay resistance through the mandated use of One-time Passwords (OTP) devices, cryptographic authenticators, or lookup codes.",
                            "Verify intent to authenticate by requiring the entry of an OTP token or user-initiated action such as a button press on a FIDO hardware key."
                        ]
                    },
                    {
                        "title": "Look-up Secret Verifier",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that lookup secrets can be used only once.",
                            "Verify that lookup secrets have sufficient randomness (112 bits of entropy), or if less than 112 bits of entropy, salted with a unique and random 32-bit salt and hashed with an approved one-way hash.",
                            "Verify that lookup secrets are resistant to offline attacks, such as predictable values."
                        ]
                    },
                    {
                        "title": "One Time Verifier",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that time-based OTPs have a defined lifetime before expiring.",
                            "Verify that symmetric keys used to verify submitted OTPs are highly protected, such as by using a hardware security module or secure operating system based key storage.",
                            "Verify that approved cryptographic algorithms are used in the generation, seeding, and verification of OTPs.",
                            "Verify that time-based OTP can be used only once within the validity period.",
                            "Verify that if a time-based multi-factor OTP token is re-used during the validity period, it is logged and rejected with secure notifications being sent to the holder of the device.",
                            "Verify physical single-factor OTP generator can be revoked in case of theft or other loss. Ensure that revocation is immediately effective across logged in sessions, regardless of location.",
                            "Verify that biometric authenticators are limited to use only as secondary factors in conjunction with either something you have and something you know."
                        ]
                    },
                    {
                        "title": "Out of Band Verifier",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": " Out of band: NIST \"restricted\" authenticators, such as SMS or PSTN",
                        "mitigation_measures": [
                            "Verify that clear text out of band (NIST \"restricted\") authenticators, such as SMS or PSTN, are not offered by default, and stronger alternatives such as push notifications are offered first.",
                            "Verify that the out of band verifier expires out of band authentication requests, codes, or tokens after 10 minutes.",
                            "Verify that the out of band verifier authentication requests, codes, or tokens are only usable once, and only for the original authentication request.",
                            "Verify that the out of band authenticator and verifier communicates over a secure independent channel.",
                            "Verify that the out of band verifier retains only a hashed version of the authentication code.",
                            "Verify that the initial authentication code is generated by a secure random number generator, containing at least 20 bits of entropy (typically a six digital random number is sufficient)."
                        ]
                    },
                    {
                        "title": "Password Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that user set passwords are at least 12 characters in length (after multiple spaces are combined). ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that passwords of at least 64 characters are permitted, and that passwords of more than 128 characters are denied. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that password truncation is not performed. However, consecutive multiple spaces may be replaced by a single space. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that any printable Unicode character, including language neutral characters such as spaces and Emojis are permitted in passwords.",
                            "Verify users can change their password.",
                            "Verify that password change functionality requires the user's current and new password.",
                            "Verify that passwords submitted during account registration, login, and password change are checked against a set of breached passwords either locally (such as the top 1,000 or 10,000 most common passwords which match the system's password policy) or using an external API. If using an API a zero knowledge proof or other mechanism should be used to ensure that the plain text password is not sent or used in verifying the breach status of the password. If the password is breached, the application must require the user to set a new non-breached password. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that a password strength meter is provided to help users set a stronger password.",
                            "Verify that there are no password composition rules limiting the type of characters permitted. There should be no requirement for upper or lower case or numbers or special characters. ([C6](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that there are no periodic credential rotation or password history requirements.",
                            "Verify that \"paste\" functionality, browser password helpers, and external password managers are permitted.",
                            "Verify that the user can choose to either temporarily view the entire masked password, or temporarily view the last typed character of the password on platforms that do not have this as built-in functionality."
                        ]
                    },
                    {
                        "title": "Service Authentication",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that intra-service secrets do not rely on unchanging credentials such as passwords, API keys or shared accounts with privileged access.",
                            "Verify that if passwords are required for service authentication, the service account used is not a default credential. (e.g. root/root or admin/admin are default in some services during installation).",
                            "Verify that passwords are stored with sufficient protection to prevent offline recovery attacks, including local system access.",
                            "Verify passwords, integrations with databases and third-party systems, seeds and internal secrets, and API keys are managed securely and not included in the source code or stored within source code repositories. Such storage SHOULD resist offline attacks. The use of a secure software key store (L1), hardware TPM, or an HSM (L3) is recommended for password storage."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D03",
        "title": "Build and Deployment",
        "description": "Secure build and deployment processes ensure that software is developed, tested, and released in a secure manner. This includes using continuous integration/continuous deployment (CI/CD) pipelines, automated testing, and secure coding practices to detect and mitigate vulnerabilities early",
        "areas": [
            {
                "id": "A07",
                "title": "Build",
                "description": "The build process involves compiling and assembling code in a secure manner. This includes using secure coding practices, automated testing, and continuous integration to detect and fix vulnerabilities early",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Building and testing of artifacts in virtual environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "While building and testing artifacts, third party systems, application frameworks and 3rd party libraries are used. These might be malicious as a result of vulnerable libraries or because they are altered during the delivery phase.",
                        "mitigation_measures": [
                            "Each step during within the build and testing phase is performed in a separate virtual environments, which is destroyed afterward."
                        ]
                    },
                    {
                        "title": "Defined build process",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Sample evidence as an attribute in the yaml: The build process is defined in [REPLACE-ME Pipeline](https://replace-me/jenkins/job) in the folder _vars_. Projects are using a _Jenkinsfile_ to use the defined process.",
                        "mitigation_measures": [
                            "A well defined build process lowers the possibility of errors during the build process."
                        ]
                    },
                    {
                        "title": "Pinning of artifacts",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Pinning of artifacts ensure that changes are performed only when intended."
                        ]
                    },
                    {
                        "title": "SBOM of components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "SBOM (Software Bill of Materials) is a document that lists all components, libraries, and dependencies used in a software application or container image. Creating an SBOM during the build process can help ensure transparency, security, and license compliance for your application.",
                        "mitigation_measures": [
                            "Creation of an SBOM of components (e.g. application and container image content) during build."
                        ]
                    },
                    {
                        "title": "Signing of artifacts",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "To perform a push to a GitHub repository, you must be authenticated. It's important to note that GitHub does not verify if the authenticated user's email address matches the one in the commit. To clearly identify the author of a commit for reviewers, commit signing is recommended. GitHub actions such as [semantic-release-action](https://github.com/cycjimmy/semantic-release-action) do not automatically sign commits and may encounter issues as a result. To address this, you can refer to a working configuration example in the [workflow folder](https://github.com/devsecopsmaturitymodel/DevSecOps-MaturityModel/blob/master/.github/workflows/main.yml) of DSOMM, which demonstrates how to use semantic release action in conjunction with [planetscale/ghcommit-action](https://github.com/planetscale/ghcommit-action). For added security, consider using [Fine-grained personal access tokens](https://github.blog/2022-10-18-introducing-fine-grained-personal-access-tokens-for-github/) provided by your organization for a specific repository. Store the Personal Access Token (PAT) as a secret in your project.",
                        "mitigation_measures": [
                            "Digitally signing artifacts for all steps during the build and especially docker images, helps to ensure their integrity and authenticity."
                        ]
                    },
                    {
                        "title": "Signing of code",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Digitally signing commits helps to prevent unauthorized manipulation of source code."
                        ]
                    }
                ]
            },
            {
                "id": "A18",
                "title": "Deployment",
                "description": "Secure deployment ensures that applications are released in a manner that maintains their security integrity. This involves automating deployment processes, managing secrets securely, and verifying the integrity of deployed software",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Blue/Green Deployment",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "A Blue/Green Deployment is a software release strategy designed to minimize downtime and reduce the risk of errors during the deployment process. It involves maintaining two identical environments, referred to as \u201cblue\u201d and \u201cgreen.\u201d At any given time, one environment (e.g., blue) is live and serving production traffic, while the other (e.g., green) is idle and used for testing new versions of the application",
                        "mitigation_measures": [
                            "Using a blue/green deployment strategy increases application availability and reduces deployment risk by simplifying the rollback process if a deployment fails."
                        ]
                    },
                    {
                        "title": "Defined decommissioning process",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "The decommissioning process in the context of Docker and Kubernetes involves retiring Docker containers, images, and Kubernetes resources that are no longer needed or have been replaced. This process must be carefully executed to avoid impacting other services and applications.",
                        "mitigation_measures": [
                            "A clear decommissioning process ensures the removal of unused applications from the `Inventory of production components` and if implemented from `Inventory of production artifacts`."
                        ]
                    },
                    {
                        "title": "Defined deployment process",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Defining a deployment process ensures that there are established criteria in terms of functionalities, security, compliance, and performance, and that the artifacts meet them."
                        ]
                    },
                    {
                        "title": "Environment depending configuration parameters (secrets)",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Set configuration parameters via environment variables stored using specific platform functionalities or secrets management systems (e.g. Kubernetes secrets or Hashicorp Vault)."
                        ]
                    },
                    {
                        "title": "Evaluation of the trust of used components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Each components source is evaluated to be trusted. For example the source, number of developers included, email configuration used by maintainers to prevent maintainer account theft, typo-squatting, ... Create image assessment criteria, perform an evaluation of images and create a whitelist of artifacts/container images/virtual machine images."
                        ]
                    },
                    {
                        "title": "Handover of confidential parameters",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Encryption ensures confidentiality of credentials e.g. from unauthorized access on the file system. Also, the usage of a credential management system can help protect credentials."
                        ]
                    },
                    {
                        "title": "Inventory of production artifacts",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A documented inventory of artifacts in production like container images exists (gathered manually or automatically)."
                        ]
                    },
                    {
                        "title": "Inventory of production components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A documented inventory of components in production exists (gathered manually or automatically). For example a manually created document with applications in production. In a kubernetes cluster, namespaces can be automatically gathered and documented, e.g. in a JSON in a S3 bucket/git repository, dependency track."
                        ]
                    },
                    {
                        "title": "Inventory of production dependencies",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A documented inventory of dependencies used in artifacts like container images and containers exists."
                        ]
                    },
                    {
                        "title": "Reusability of artifacts for different environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Building an artifact once and deploying it to different environments helps achieving that only tested artifacts are allowed to reach the production environment",
                        "mitigation_measures": [
                            "Building an artifact once and deploying it to different environments helps achieving that only tested artifacts are allowed to reach the production environment"
                        ]
                    },
                    {
                        "title": "Rolling update on deployment",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "A rolling update is a deployment strategy that gradually replaces old versions of an application with new ones, ensuring minimal downtime and continuous availability.",
                        "mitigation_measures": [
                            "A deployment without downtime is performed*."
                        ]
                    },
                    {
                        "title": "Same artifact for environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Building an artifact once and deploying it to different environments means that only tested artifacts are allowed to reach the production environment"
                        ]
                    },
                    {
                        "title": "Usage of feature toggles",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of environment independent configuration parameters, called static feature toggles, mitigates the risk of accidentally enabling insecure features in production."
                        ]
                    }
                ]
            },
            {
                "id": "A34",
                "title": "Patch Management",
                "description": "Patch management is the process of regularly updating software to fix vulnerabilities and improve security. This involves timely application of patches and updates to prevent exploitation of known vulnerabilities",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "A patch policy is defined",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A patch policy for all artifacts (e.g. in images) is defined. How often is an image rebuilt?"
                        ]
                    },
                    {
                        "title": "Automated deployment of automated PRs",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Automated merges of automated created PRs for outdated dependencies.",
                        "mitigation_measures": [
                            "After merging of an automated dependency PR, automated deployment is needed,"
                        ]
                    },
                    {
                        "title": "Automated merge of automated PRs",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Automated merges of automated created PRs for outdated dependencies.",
                        "mitigation_measures": [
                            "A good practice is to merge trusted dependencies (e.g. spring boot) after a grace period like one week. Often, patches, fixes and minor updates are automatically merged. Be aware that automated merging requires a high automated test coverage. Enforcement of merging of pull requests after a grace period."
                        ]
                    },
                    {
                        "title": "Automated PRs for patches",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Fast patching of third party component is needed. The DevOps way is to have an automated pull request for new components. This includes * Applications * Virtualized operating system components (e.g. container images) * Operating Systems * Infrastructure as Code/GitOps (e.g. argocd based on a git repository or terraform)"
                        ]
                    },
                    {
                        "title": "Nightly build of images (base images)",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "A base image is a pre-built image that serves as a starting point for building new images or containers. These base images usually include an operating system, necessary dependencies, libraries, and other components that are required to run a specific application or service. Nightly builds of custom base images refer to an automated process that occurs daily or on a scheduled basis, usually during nighttime or off-peak hours, to create updated versions of custom base images.",
                        "mitigation_measures": [
                            "Custom base images are getting build at least nightly. In case the packages in the base image e.g. <i>centos</i> has changed, the build server triggers the build of depending images."
                        ]
                    },
                    {
                        "title": "Reduction of the attack surface",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Distroless images are minimal, stripped-down base images that contain only the essential components required to run your application. They do not include package managers, shells, or any other tools that are commonly found in standard Linux distributions. Using distroless images can help reduce the attack surface and overall size of your container images.",
                        "mitigation_measures": [
                            "Removal of unneeded components, dependencies, files or file access rights. For container images the usage of distroless images is recommended."
                        ]
                    },
                    {
                        "title": "Usage of a maximum lifetime for images",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "The maximum lifetime for a Docker container refers to the duration a container should be allowed to run before it is considered outdated, stale, or insecure. There is not a fixed, universally applicable maximum lifetime for a Docker container, as it varies depending on the specific use case, application requirements, and security needs. As a best practice, it is essential to define a reasonable maximum lifetime for containers to ensure that you consistently deploy the most recent, patched, and secure versions of both your custom base images and third-party images.",
                        "mitigation_measures": [
                            "A short maximum lifetime for images is defined, e.g. 30 days. The project images, based on the nightly builded images, are deployed at leased once within the defined lifetime. Third Party images are deployed at leased once within the defined lifetime."
                        ]
                    },
                    {
                        "title": "Usage of a short maximum lifetime for images",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "The maximum lifetime for a Docker container refers to the duration a container should be allowed to run before it is considered outdated, stale, or insecure. There is not a fixed, universally applicable maximum lifetime for a Docker container, as it varies depending on the specific use case, application requirements, and security needs. As a best practice, it is essential to define a reasonable maximum lifetime for containers to ensure that you consistently deploy the most recent, patched, and secure versions of both your custom base images and third-party images.",
                        "mitigation_measures": [
                            "A good practice is to perform the build and deployment daily or even just-in-time, when a new component (e.g. package) for the image is available."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D04",
        "title": "Culture and Organization",
        "description": "Cybersecurity culture refers to the collective attitudes, beliefs, and behaviors of an organization towards security. Building a strong cybersecurity culture involves training employees, promoting awareness, and integrating security practices into everyday business operations to reduce risks and enhance overall security posture",
        "areas": [
            {
                "id": "A05",
                "title": "Architecture, Design and Threat Modeling",
                "description": "Security by design integrates cybersecurity measures from the beginning of the development process. This proactive approach ensures that security is a fundamental part of the system architecture and not an afterthought. \nThis involves creating secure system architectures and designs by identifying potential threats early in the development process. Threat modeling helps in understanding and mitigating risks by analyzing how an attacker might exploit system vulnerabilities",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Conduction of advanced threat modeling",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "**Example High Maturity Scenario:** Based on a detailed threat model defined and updated through code, the team decides the following: * Local encrypted caches need to expire and auto-purged. * Communication channels encrypted and authenticated. * All secrets persisted in shared secrets store. * Frontend designed with permissions model integration. * Permissions matrix defined. * Input is escaped output is encoded appropriately using well established libraries. Source: OWASP Project Integration Project",
                        "mitigation_measures": [
                            "Threat modeling is performed by using reviewing user stories and producing security driven data flow diagrams."
                        ]
                    },
                    {
                        "title": "Conduction of simple threat modeling on business level",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Threat modeling of business functionality is performed during the product backlog creation to facilitate early detection of security defects."
                        ]
                    },
                    {
                        "title": "Conduction of simple threat modeling on technical level",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Threat modeling is a structured activity for identifying, evaluating, and managing system threats, architectural design flaws, and recommended security mitigations. It is typically done as part of the design phase or as part of a security assessment. Threat modeling is a team exercise, including product owners, architects, security champions, and security testers. At this maturity level, expose teams and stakeholders to threat modeling to increase security awareness and to create a shared vision on the security of the system. At maturity level 1, you perform threat modeling ad-hoc for high-risk applications and use simple threat checklists, such as STRIDE. Avoid lengthy workshops and overly detailed lists of low-relevant threats. Perform threat modeling iteratively to align to more iterative development paradigms. If you add new functionality to an existing application, look only into the newly added functions instead of trying to cover the entire scope. A good starting point is the existing diagrams that you annotate during discussion workshops. Always make sure to persist the outcome of a threat modeling discussion for later use. Your most important tool to start threat modeling is a whiteboard, smartboard, or a piece of paper. Aim for security awareness, a simple process, and actionable outcomes that you agree upon with your team. Once requirements are gathered and analysis is performed, implementation specifics need to be defined. The outcome of this stage is usually a diagram outlining data flows and a general system architecture. This presents an opportunity for both threat modeling and attaching security considerations to every ticket and epic that is the outcome of this stage. Source: https://owaspsamm.org/model/design/threat-assessment/stream-b/ There is some great advice on threat modeling out there *e.g.* [this](https://arstechnica.com/information-technology/2017/07/how-i-learned-to-stop-worrying-mostly-and-love-my-threat-model/) article or [this](https://www.microsoft.com/en-us/securityengineering/sdl/threatmodeling) one. A bite sized primer by Adam Shostack himself can be found [here](https://adam.shostack.org/blog/2018/03/threat-modeling-panel-at-appsec-cali-2018/). OWASP includes a short [article](https://wiki.owasp.org/index.php/Category:Threat_Modeling) on Threat Modeling along with a relevant [Cheatsheet](https://cheatsheetseries.owasp.org/cheatsheets/Threat_Modeling_Cheat_Sheet.html). Moreover, if you're following OWASP SAMM, it has a short section on [Threat Assessment](https://owaspsamm.org/model/design/threat-assessment/). There's a few projects that can help with creating Threat Models at this stage, [PyTM](https://github.com/izar/pytm) is one, [ThreatSpec](https://github.com/threatspec/threatspec) is another. > Note: _A threat model can be as simple as a data flow diagram with attack vectors on every flow and asset and equivalent remediations. An example can be found below._ ![Threat Model](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/threat_model.png \"Threat Model\") Last, if the organizations maps Features to Epics, the Security Knowledge Framework (SKF) can be used to facilitate this process by leveraging it's questionnaire function. ![SKF](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/skf_qs.png \"SKF\") This practice has the side effect that it trains non-security specialists to think like attackers. The outcomes of this stage should help lay the foundation of secure design and considerations. **Example Low Maturity Scenario:** Following vague feature requirements the design includes caching data to a local unencrypted database with a hardcoded password. Remote data store access secrets are hardcoded in the configuration files. All communication between backend systems is plaintext. Frontend serves data over GraphQL as a thin layer between caching system and end user. GraphQL queries are dynamically translated to SQL, Elasticsearch and NoSQL queries. Access to data is protected with basic auth set to _1234:1234_ for development purposes. Source: OWASP Project Integration Project",
                        "mitigation_measures": [
                            "Threat modeling of technical features is performed during the product sprint planning."
                        ]
                    },
                    {
                        "title": "Creation of advanced abuse stories",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Advanced abuse stories are created as part of threat modeling activities."
                        ]
                    },
                    {
                        "title": "Creation of simple abuse stories",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Abuse stories are created during the creation of user stories."
                        ]
                    },
                    {
                        "title": "Definition of threat modeling processes and standards",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Creation of threat modeling processes and standards through the organization helps to enhance the security culture and provide more structure to the threat model exercises."
                        ]
                    },
                    {
                        "title": "Secure Software Development Lifecycle",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the use of a secure software development lifecycle that addresses security in all stages of development. ([C1](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify the use of threat modeling for every design change or sprint planning to identify threats, plan for countermeasures, facilitate appropriate risk responses, and guide security testing.",
                            "Verify that all user stories and features contain functional security constraints, such as \"As a user, I should be able to view and edit my profile. I should not be able to view or edit anyone else's profile\"",
                            "Verify documentation and justification of all the application's trust boundaries, components, and significant data flows.",
                            "Verify definition and security analysis of the application's high-level architecture and all connected remote services. ([C1](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify implementation of centralized, simple (economy of design), vetted, secure, and reusable security controls to avoid duplicate, missing, ineffective, or insecure controls. ([C10](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify availability of a secure coding checklist, security requirements, guideline, or policy to all developers and testers."
                        ]
                    }
                ]
            },
            {
                "id": "A08",
                "title": "Business Logic",
                "description": "Protecting business logic involves ensuring that workflows and processes cannot be manipulated to bypass security controls implemented at the organization level",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Approval by reviewing any new version",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "On each new version (e.g. Pull Request) of source code or infrastructure components a security peer review of the changes is performed (two eyes principle) and approval given by the reviewer."
                        ]
                    },
                    {
                        "title": "Business Logic Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Define business logic workflows and processes to ensure security controls are implemented and followed at the organization level",
                            "Verify that the application will only process business logic flows for the same user in sequential step order and without skipping steps.",
                            "Verify that the application will only process business logic flows with all steps being processed in realistic human time, i.e. transactions are not submitted too quickly.",
                            "Verify the application has appropriate limits for specific business actions or transactions which are correctly enforced on a per user basis.",
                            "Verify that the application has anti-automation controls to protect against excessive calls such as mass data exfiltration, business logic requests, file uploads or denial of service attacks.",
                            "Verify the application has business logic limits or validation to protect against likely business risks or threats, identified using threat modeling or similar methodologies.",
                            "Verify that the application does not suffer from \"Time Of Check to Time Of Use\" (TOCTOU) issues or other race conditions for sensitive operations.",
                            "Verify that the application monitors for unusual events or activity from a business logic perspective. For example, attempts to perform actions out of order or actions which a normal user would never attempt. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application has configurable alerting when automated attacks or unusual activity is detected."
                        ]
                    },
                    {
                        "title": "Definition of simple BCDR practices for critical components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By understanding and documenting a business continuity and disaster recovery (BCDR) plan, the overall availability of systems and applications is increased. Success factors like responsibilities, Service Level Agreements, Recovery Point Objectives, Recovery Time Objectives or Failover must be fully documented and understood."
                        ]
                    }
                ]
            },
            {
                "id": "A11",
                "title": "Communication",
                "description": "Effective communication in cybersecurity ensures that all stakeholders understand security policies, risks, and incident responses. This includes clear guidelines, regular training, and transparent reporting during and after security incidents",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Definition of a system change management process",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Each change of a system is automatically recorded and adequately logged."
                        ]
                    },
                    {
                        "title": "Information security targets (Points of Contact) are communicated",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Transparent and timely communication of the security targets by senior management is essential to ensure teams' buy-in and support."
                        ]
                    }
                ]
            },
            {
                "id": "A22",
                "title": "Education and Guidance",
                "description": "Cybersecurity education and guidance involve training and resources to help individuals and organizations understand and implement security best practices. This includes formal education programs, certifications, and ongoing professional development",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Ad-Hoc Security trainings for software developers",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Provide security awareness training for all personnel involved in software development Ad-Hoc."
                        ]
                    },
                    {
                        "title": "Aligning security in teams",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By aligning security Subject Matter Experts with project teams, a higher security standard can be achieved."
                        ]
                    },
                    {
                        "title": "Conduction of collaborative security checks with developers and system administrators",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Periodically security reviews of source code (SCA), in which security SME, developers and operations are involved, are effective at increasing the robustness of software and the security knowledge of the teams involved."
                        ]
                    },
                    {
                        "title": "Conduction of collaborative team security checks",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Mutual security testing the security of other teams project enhances security awareness and knowledge."
                        ]
                    },
                    {
                        "title": "Conduction of war games",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "War Games like activities help train for incidents. Security SMEs create attack scenarios in a testing environment enabling the trainees to learn how to react in case of an incident."
                        ]
                    },
                    {
                        "title": "Each team has a security champion",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Implement a program where each software development team has a member considered a Security Champion who is the liaison between Information Security and developers. Depending on the size and structure of the team the Security Champion may be a software developer, tester, or a product manager. The \u00e2\u0080\u009cSecurity Champion\u00e2\u0080\u009d has a set number of hours per week for Information Security related activities. They participate in periodic briefings to increase awareness and expertise in different security disciplines. \u00e2\u0080\u009cSecurity Champions\u00e2\u0080\u009d have additional training to help develop these roles as Software Security subject-matter experts. You may need to customize the way you create and support \u00e2\u0080\u009cSecurity Champions\u00e2\u0080\u009d for cultural reasons. The goals of the position are to increase effectiveness and efficiency of application security and compliance and to strengthen the relationship between various teams and Information Security. To achieve these objectives, \u00e2\u0080\u009cSecurity Champions\u00e2\u0080\u009d assist with researching, verifying, and prioritizing security and compliance related software defects. They are involved in all Risk Assessments, Threat Assessments, and Architectural Reviews to help identify opportunities to remediate security defects by making the architecture of the application more resilient and reducing the attack threat surface. Source: [OWASP SAMM](https://owaspsamm.org/model/governance/education-and-guidance/stream-b/)",
                        "mitigation_measures": [
                            "Each team defines an individual to be responsible for security. These individuals are often referred to as 'security champions'"
                        ]
                    },
                    {
                        "title": "Regular security training for all",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Conduct security awareness training for all roles currently involved in the management, development, testing, or auditing of the software. The goal is to increase the awareness of application security threats and risks, security best practices, and secure software design principles. Develop training internally or procure it externally. Ideally, deliver training in person so participants can have discussions as a team, but Computer-Based Training (CBT) is also an option. Course content should include a range of topics relevant to application security and privacy, while remaining accessible to a non-technical audience. Suitable concepts are secure design principles including Least Privilege, Defense-in-Depth, Fail Secure (Safe), Complete Mediation, Session Management, Open Design, and Psychological Acceptability. Additionally, the training should include references to any organization-wide standards, policies, and procedures defined to improve application security. The OWASP Top 10 vulnerabilities should be covered at a high level. Training is mandatory for all employees and contractors involved with software development and includes an auditable sign-off to demonstrate compliance. Consider incorporating innovative ways of delivery (such as gamification) to maximize its effectiveness and combat desensitization. [Source: OWASP SAMM 2](https://owaspsamm.org/model/governance/education-and-guidance/stream-a/)",
                        "mitigation_measures": [
                            "Provide security awareness training for all internal personnel involved in software development on a regular basis like twice in a year for 1-3 days."
                        ]
                    },
                    {
                        "title": "Regular security training for externals",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Provide security awareness training for all personnel including externals involved in software development on a regular basis."
                        ]
                    },
                    {
                        "title": "Regular security training of security champions",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Regular security training of security champions."
                        ]
                    },
                    {
                        "title": "Reward of good communication",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Good communication and transparency encourages cross-organizational support. Gamification of security is also known to help, examples include T-Shirts, mugs, cups, gift cards and 'High-Fives'."
                        ]
                    },
                    {
                        "title": "Security Coaching",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By coaching teams on security topics using for example the samman coaching method, teams internalize security practices as new habits in their development process."
                        ]
                    },
                    {
                        "title": "Security code review",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "- New vulnerabilities may be found before reaching production. - Old vulnerabilities are found and fixed.",
                        "mitigation_measures": [
                            "The following areas of code tend to have a high-risk of containing security vulnerabilities: - Crypto implementations / usage - Parser, unparser - System configuration - Authentication, authorization - Session management - Request throttling - :unicorn: (self-developed code, only used in that one software)"
                        ]
                    },
                    {
                        "title": "Security consulting on request",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Security consulting to teams is given on request. The security consultants can be internal or external."
                        ]
                    },
                    {
                        "title": "Security-Lessoned-Learned",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Running a 'lessons learned' session after an incident helps drive continuous improvement. Regular meetings with security champions are a good place to share and discuss lessons learned."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D05",
        "title": "Data Storage",
        "description": "Data storage security ensures that data at rest is protected from unauthorized access, corruption, or loss. This involves using encryption, access controls, and secure backup solutions to safeguard data throughout its lifecycle, whether stored on-premises or in the cloud",
        "areas": [
            {
                "id": "A16",
                "title": "Data Protection",
                "description": "Data protection encompasses measures to safeguard digital information from unauthorized access, corruption, or theft. This includes encryption, access controls, and data masking to ensure data integrity and confidentiality. \nStored cryptography refers to the use of encryption to protect data at rest. This ensures that even if data is accessed without authorization, it remains unreadable without the decryption key",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Client-side Data Protection",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the application sets sufficient anti-caching headers so that sensitive data is not cached in modern browsers.",
                            "Verify that data stored in browser storage (such as localStorage, sessionStorage, IndexedDB, or cookies) does not contain sensitive data.",
                            "Verify that authenticated data is cleared from client storage, such as the browser DOM, after the client or session is terminated."
                        ]
                    },
                    {
                        "title": "Cryptographic Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that there is an explicit policy for management of cryptographic keys and that a cryptographic key lifecycle follows a key management standard such as NIST SP 800-57.",
                            "Verify that consumers of cryptographic services protect key material and other secrets by using key vaults or API based alternatives.",
                            "Verify that all keys and passwords are replaceable and are part of a well-defined process to re-encrypt sensitive data.",
                            "Verify that the architecture treats client-side secrets--such as symmetric keys, passwords, or API tokens--as insecure and never uses them to protect or access sensitive data."
                        ]
                    },
                    {
                        "title": "Data Classification",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that regulated private data is stored encrypted while at rest, such as Personally Identifiable Information (PII), sensitive personal information, or data assessed likely to be subject to EU's GDPR.",
                            "Verify that regulated health data is stored encrypted while at rest, such as medical records, medical device details, or de-anonymized research records.",
                            "Verify that regulated financial data is stored encrypted while at rest, such as financial accounts, defaults or credit history, tax records, pay history, beneficiaries, or de-anonymized market or research records."
                        ]
                    },
                    {
                        "title": "Data Encoding",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Data Obfuscation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Data Protection and Privacy Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that all sensitive data is identified and classified into protection levels.",
                            "Verify that all protection levels have an associated set of protection requirements, such as encryption requirements, integrity requirements, retention, privacy and other confidentiality requirements, and that these are applied in the architecture."
                        ]
                    },
                    {
                        "title": "General Data Protection",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Compliance with GDPR",
                            "Verify the application protects sensitive data from being cached in server components such as load balancers and application caches.",
                            "Verify that all cached or temporary copies of sensitive data stored on the server are protected from unauthorized access or purged/invalidated after the authorized user accesses the sensitive data.",
                            "Verify the application minimizes the number of parameters in a request, such as hidden fields, Ajax variables, cookies and header values.",
                            "Verify the application can detect and alert on abnormal numbers of requests, such as by IP, user, total per hour or day, or whatever makes sense for the application.",
                            "Verify that regular backups of important data are performed and that test restoration of data is performed.",
                            "Verify that backups are stored securely to prevent data from being stolen or corrupted."
                        ]
                    },
                    {
                        "title": "Random Values",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that all random numbers, random file names, random GUIDs, and random strings are generated using the cryptographic module's approved cryptographically secure random number generator when these random values are intended to be not guessable by an attacker.",
                            "Verify that random GUIDs are created using the GUID v4 algorithm, and a Cryptographically-secure Pseudo-random Number Generator (CSPRNG). GUIDs created using other pseudo-random number generators may be predictable.",
                            "Verify that random numbers are created with proper entropy even when the application is under heavy load, or that the application degrades gracefully in such circumstances."
                        ]
                    },
                    {
                        "title": "Secret Management",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that a secrets management solution such as a key vault is used to securely create, store, control access to and destroy secrets. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that key material is not exposed to the application but instead uses an isolated security module like a vault for cryptographic operations. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Sensitive Private Data",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that sensitive data is sent to the server in the HTTP message body or headers, and that query string parameters from any HTTP verb do not contain sensitive data.",
                            "Verify that users have a method to remove or export their data on demand.",
                            "Verify that users are provided clear language regarding collection and use of supplied personal information and that users have provided opt-in consent for the use of that data before it is used in any way.",
                            "Verify that all sensitive data created and processed by the application has been identified, and ensure that a policy is in place on how to deal with sensitive data. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify accessing sensitive data is audited (without logging the sensitive data itself), if the data is collected under relevant data protection directives or where logging of access is required.",
                            "Verify that sensitive information contained in memory is overwritten as soon as it is no longer required to mitigate memory dumping attacks, using zeroes or random data.",
                            "Verify that sensitive or private information that is required to be encrypted, is encrypted using approved algorithms that provide both confidentiality and integrity. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that sensitive personal information is subject to data retention classification, such that old or out of date data is deleted automatically, on a schedule, or as the situation requires."
                        ]
                    }
                ]
            },
            {
                "id": "A26",
                "title": "Files and Resources",
                "description": "Managing files and resources securely involves controlling access, ensuring data integrity, and protecting against unauthorized modifications. This includes using secure file transfer protocols and regular audits",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "File Download",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the web tier is configured to serve only files with specific file extensions to prevent unintentional information and source code leakage. For example, backup files (e.g. .bak), temporary working files (e.g. .swp), compressed files (.zip, .tar.gz, etc) and other extensions commonly used by editors should be blocked unless required.",
                            "Verify that direct requests to uploaded files will never be executed as HTML/JavaScript content."
                        ]
                    },
                    {
                        "title": "File Execution",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that user-submitted filename metadata is not used directly by system or framework filesystems and that a URL API is used to protect against path traversal.",
                            "Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure, creation, updating or removal of local files (LFI).",
                            "Verify that user-submitted filename metadata is validated or ignored to prevent the disclosure or execution of remote files via Remote File Inclusion (RFI) or Server-side Request Forgery (SSRF) attacks.",
                            "Verify that the application protects against Reflective File Download (RFD) by validating or ignoring user-submitted filenames in a JSON, JSONP, or URL parameter, the response Content-Type header should be set to text/plain, and the Content-Disposition header should have a fixed filename.",
                            "Verify that untrusted file metadata is not used directly with system API or libraries, to protect against OS command injection.",
                            "Verify that the application does not include and execute functionality from untrusted sources, such as unverified content distribution networks, JavaScript libraries, node npm libraries, or server-side DLLs."
                        ]
                    },
                    {
                        "title": "File Integrity",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that files obtained from untrusted sources are validated to be of expected type based on the file's content."
                        ]
                    },
                    {
                        "title": "File Storage",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that files obtained from untrusted sources are stored outside the web root, with limited permissions.",
                            "Verify that files obtained from untrusted sources are scanned by antivirus scanners to prevent upload and serving of known malicious content."
                        ]
                    },
                    {
                        "title": "File Upload",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application will not accept large files that could fill up storage or cause a denial of service.",
                            "Verify that the application checks compressed files (e.g. zip, gz, docx, odt) against maximum allowed uncompressed size and against maximum number of files before uncompressing the file.",
                            "Verify that a file size quota and maximum number of files per user is enforced to ensure that a single user cannot fill up the storage with too many files, or excessively large files."
                        ]
                    },
                    {
                        "title": "SSRF Protection",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "Server-Side Request Forgery (SSRF) protection involves implementing measures to prevent attackers from exploiting vulnerabilities that allow them to make unauthorized requests from a server.",
                        "mitigation_measures": [
                            "Key strategies that help mitigate the risks associated with SSRF attacks include:",
                            "",
                            "1. Input Validation: Strictly validate and sanitize user inputs to ensure only trusted URLs and IP addresses are allowed.",
                            "2. Access Controls: Restrict server access to internal resources and sensitive endpoints, using network segmentation and firewalls.",
                            "3. Use of Allowlists: Implement allowlists to permit only specific, trusted destinations for server requests.",
                            "4. Disable Unnecessary Protocols: Limit the server\u2019s ability to use unnecessary protocols that could be exploited."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D06",
        "title": "Implementation",
        "description": "Implementation in the context of SSDLC and DevSecOps involves the practical application of security measures and practices during the development and deployment of software. This includes integrating security tools into the development pipeline, ensuring secure coding practices, and applying security patches and updates.",
        "areas": [
            {
                "id": "A03",
                "title": "Application Hardening",
                "description": "Application hardening involves strengthening the security of software applications by reducing vulnerabilities and minimizing attack surfaces. This includes applying security patches, configuring security settings, and implementing measures like input validation and secure coding practices.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "App. Hardening Level 1",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jump-start the development process, but also do so securely. [...] The Requirements gathering process tries to answer the question: _\"What is the system going to do?\"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/security-requirements/stream-b/) supplier security. ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png) Organizations can use these to add solid security considerations at the start of the Software Development or Procurement process. These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations. In case of internal development and if the organization maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below. Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)",
                        "mitigation_measures": [
                            "Following frameworks like the * OWASP Application Security Verification Standard Level 1 * OWASP Mobile Application Security Verification Standard in all applications provides a good baseline. Implement 25%-50% of the recommendations."
                        ]
                    },
                    {
                        "title": "App. Hardening Level 2",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Following frameworks like the * OWASP Application Security Verification Standard Level 2 * OWASP Mobile Application Security Verification Standard Level 2 Implement 50%-95% of the recommendations."
                        ]
                    },
                    {
                        "title": "App. Hardening Level 3",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Following frameworks like the * OWASP Application Security Verification Standard Level 3 * OWASP Mobile Application Security Verification Standard Implement 95%-100% of the recommendations."
                        ]
                    },
                    {
                        "title": "Context-aware output encoding",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "**Input validation** stops malicious data from entering your system. \\ **Output encoding** neutralizes malicious data before rendering to user, or the next system. Input validation and output encoding work together. Apply both. **Context-aware output encoding** encodes data differently, depending on its context. In the sample below the `{{bad_data}}` must be encoded differently, depending on its context, to render safe HTML. ```html <div>{{bad_data}}</div> <a href=\"{{bad_data}}\">Click me</a> <script>var x = '{{bad_data}}';</script> <script>/** Comment {{bad_data}} */</script> ```",
                        "mitigation_measures": [
                            "* Use modern secure frameworks such as React/Angular/Vue/Svelte. The default method here renders data in a safe way. * Use established and well-maintained encoding libraries such as OWASP\u00e2\u0080\u0099s Java Encoder and Microsoft\u00e2\u0080\u0099s AntiXSS. * Implement content security policies (CSP) to restrict the types of content that can be loaded and executed."
                        ]
                    },
                    {
                        "title": "Parametrization",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "By concatenating strings from user input to build SQL queries, an attacker can manipulate the query to do other unintentional SQL commands as well. This is called *SQL injection* but the principle applies to NoSql, and anywhere that your code is building commands that will be executed. Pay attention to these two lines of code. They seem similar, but behave very differently. * `sql.execute(\"SELECT * FROM table WHERE ID = \" + id);` * `sql.execute(\"SELECT * FROM table WHERE ID = ?\", id);` The second line is parameterized. The same principle applies to other types, such as command line execution, etc.",
                        "mitigation_measures": [
                            "* Identify which of the types your application is using. Check that you use: * Use _parametrized queries_ (or _prepared statements_) * For database queries, you may also use: * Use _stored procedures_ () * Use ORM (Object-Relational Mapping) tools that automatically handle input sanitization"
                        ]
                    },
                    {
                        "title": "Secure headers",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Implement and enforce security headers across all applications and services Implementation Methods: 1. Reverse Proxy/Load Balancer: Configure at nginx/Apache level 2. Web Application: Implement in the application middleware 3. Service Mesh: Configure at the ingress controller level 4. Standard Docker Image: Use secure base images with preset headers Remove or Secure: - Server header: Hide server version information - X-Powered-By: Remove technology stack information"
                        ]
                    }
                ]
            },
            {
                "id": "A19",
                "title": "Development and Source Control",
                "description": "Development and source control encompass practices and tools used to manage and track changes to software code during development. This includes using version control systems like Git to maintain code integrity, manage revisions, and collaborate securely on code changes.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": ".gitignore",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            ".gitignore files help prevent accidental commits of secrets, debug, or workstation specific data"
                        ]
                    },
                    {
                        "title": "Block force pushes",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Mandate blocking of force pushes in the version control platform."
                        ]
                    },
                    {
                        "title": "Dismiss stale PR approvals",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Implement a policy where any commits made after a pull request has been approved automatically revoke that approval, necessitating a fresh review and re-approval process."
                        ]
                    },
                    {
                        "title": "Local development linting & style checks performed",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Integrate static code analysis tools in IDEs."
                        ]
                    },
                    {
                        "title": "Require a PR before merging",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Define source code management system policies (e.g. branch protection rules, mandatory code reviews from at least one person, ...) to ensure that changes to critical branches are only possible under defined conditions. These policies can be implemented at repository level or organization level, depending on the source code management system."
                        ]
                    },
                    {
                        "title": "Require status checks to pass",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Mandate passing of security related specified status checks, like successful builds or static application security tests, before proceeding."
                        ]
                    },
                    {
                        "title": "Versioning",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Version artifacts in order to identify deployed features and issues. This includes application and infrastructure code, jenkins configuration, container and virtual machine images."
                        ]
                    }
                ]
            },
            {
                "id": "A29",
                "title": "Infrastructure Hardening",
                "description": "Infrastructure hardening involves securing the underlying hardware and software components of an IT environment. This includes applying security patches, configuring firewalls, implementing access controls, and using encryption to protect data and systems.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Applications are running in virtualized environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Applications are running in a dedicated and isolated virtualized environments."
                        ]
                    },
                    {
                        "title": "Backup",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Performing automated periodical backups are used. Backup before deployment can help facilitate deployments whilst testing the backup restore processes."
                        ]
                    },
                    {
                        "title": "Containers are running as non-root",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Containers are running as non-root. This can be enforced in the image itself or during runtime parameters (e.g. `podman run --user [...]`)."
                        ]
                    },
                    {
                        "title": "Filter outgoing traffic",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Having a whitelist and explicitly allowing egress traffic provides the ability to stop unauthorized data leakage."
                        ]
                    },
                    {
                        "title": "Hardening of the Environment",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Harden environments according to best practices. Level 2 and partially level 3 from hardening practices like 'CIS Kubernetes Bench for Security' should be considered."
                        ]
                    },
                    {
                        "title": "Hardening of the Environment - Baseline level",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Harden environments according to best practices. Level 1 and partially level 2 from hardening practices like 'CIS Kubernetes Bench for Security' should be considered."
                        ]
                    },
                    {
                        "title": "Immutable infrastructure",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Redundancies in the IT systems"
                        ]
                    },
                    {
                        "title": "Infrastructure as Code",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Systems are setup by code. A full environment can be provisioned. In addition, software like Jenkins 2 can be setup and configured in in code too. The code should be stored in a version control system."
                        ]
                    },
                    {
                        "title": "Isolated networks for virtual environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "The communication between virtual environments is controlled and regulated."
                        ]
                    },
                    {
                        "title": "Limitation of system events",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System calls are limited."
                        ]
                    },
                    {
                        "title": "MFA",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Two ore more factor authentication for all accounts on all (important) systems and applications"
                        ]
                    },
                    {
                        "title": "MFA for admins",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Two ore more factor authentication for all privileged accounts on systems and applications"
                        ]
                    },
                    {
                        "title": "Microservice-architecture",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A microservice-architecture helps to have small components, which are more easy to test."
                        ]
                    },
                    {
                        "title": "Production near environments are used by developers",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of infrastructure as code helps to create a production near environment. The developer needs to be trained in order to setup a local development environment. In addition, it should be possible to create production like test data. Often personal identifiable information is anonymized in order to comply with data protection laws."
                        ]
                    },
                    {
                        "title": "Role based authentication and authorization",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "The usage of a (role based) access control helps to restrict system access to authorized users."
                        ]
                    },
                    {
                        "title": "Simple access control for systems",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "All internal systems are using simple authentication"
                        ]
                    },
                    {
                        "title": "Usage of a chaos monkey",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A randomized periodically shutdown of systems makes sure, that nobody will perform manual changes to a system."
                        ]
                    },
                    {
                        "title": "Usage of an security account",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of a separate account dedicated for security activities."
                        ]
                    },
                    {
                        "title": "Usage of edge encryption at transit",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By using encryption at the edge of traffic in transit, it is impossible or at least harder to sniff credentials or information being outside of the organization. Using standard secure protocols like HTTPS is recommended."
                        ]
                    },
                    {
                        "title": "Usage of encryption at rest",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By using encryption at rest, it is impossible or at least harder to to read information."
                        ]
                    },
                    {
                        "title": "Usage of internal encryption at transit",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By using encryption internally, e.g. inside of a cluster, it is impossible or at least harder to sniff credentials."
                        ]
                    },
                    {
                        "title": "Usage of security by default for components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Hardening of components is important, specially for image on which other teams base on. Hardening should be performed on the operation system and on the services inside (e.g. Nginx or a Java-Application)."
                        ]
                    },
                    {
                        "title": "Usage of test and production environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A test and a production like environment is used"
                        ]
                    },
                    {
                        "title": "Virtual environments are limited",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "All virtual environments are using resource limits on hard disks, memory and CPU"
                        ]
                    },
                    {
                        "title": "WAF Advanced",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "The advanced WAF setup is designed to ensure all data is in the correct format and any superfluous input parameters are automatically rejected. It includes machine learning algorithms to detect anomalies, custom-developed rules for real-time traffic analysis, and seamless integration with existing security infrastructures to adapt to the ever-changing threat landscape.",
                        "mitigation_measures": [
                            "An advanced WAF protection level includes rigorous input validation, rejecting any parameters not explicitly required, and custom rule sets that are dynamically updated in response to emerging threats."
                        ]
                    },
                    {
                        "title": "WAF baseline",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Begin with the WAF in a monitoring state to understand the traffic and threats. Progressively enforce blocking actions based on intelligence gathered, ensuring minimal disruption to legitimate traffic.",
                        "mitigation_measures": [
                            "Implementing a web application firewall (WAF) is a critical security control. At a baseline level, the objective is to finely balance the reduction of false positives, maintaining user experience, against a potential increase in the less noticeable false negatives."
                        ]
                    },
                    {
                        "title": "WAF medium",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Maintain the WAF in alert mode initially to ensure a comprehensive understanding of potential threats. With a medium-level configuration, the WAF settings are refined for greater precision in threat detection, with a stronger emphasis on security without significantly impacting legitimate traffic.",
                        "mitigation_measures": [
                            "A WAF deployed with a medium level of protection strengthens the security posture by striking a more advanced balance between the detection of genuine threats and the minimization of false alarms."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D07",
        "title": "Monitoring",
        "description": "Cybersecurity monitoring involves continuously observing and analyzing an organization's IT infrastructure to detect and respond to potential security threats in real-time. This includes using tools like Security Information and Event Management (SIEM) systems, intrusion detection systems (IDS), and automated alerts to maintain security",
        "areas": [
            {
                "id": "A10",
                "title": "Command and Control",
                "description": "An adversary is trying to communicate with compromised systems to control them.\nCommand and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim\u2019s network structure and defenses.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Application Layer Protocol",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)",
                            "Examples: DNS, File Transfer Protocols, Mail Protocols, Publish/Subscribe Protocols, Web Protocols, etc."
                        ]
                    },
                    {
                        "title": "Communication Through Removable Media",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor file access on removable media. Detect processes that execute when removable media is mounted."
                        ]
                    },
                    {
                        "title": "Non-Standard Port",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Protocol Tunneling",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. ",
                            "",
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Proxy",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
                            "",
                            "Consider monitoring for traffic to known anonymity networks (such as [Tor](https://attack.mitre.org/software/S0183))."
                        ]
                    },
                    {
                        "title": "Remote Access Software",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.",
                            "",
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.",
                            "",
                            "[Domain Fronting](https://attack.mitre.org/techniques/T1090/004) may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions."
                        ]
                    },
                    {
                        "title": "Web Service",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Bidirectional Communication, Dead Drop Resolver, One-Way Communication",
                        "mitigation_measures": [
                            "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity."
                        ]
                    }
                ]
            },
            {
                "id": "A14",
                "title": "Credential Access",
                "description": "An adversary is trying to steal account names and passwords.\nCredential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Brute Force",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network."
                        ]
                    },
                    {
                        "title": "Credentials from Password Stores",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Stored credentials can be in: Cloud Secrets Management Stores, Credentials from Web Browsers, Keycloak, Password Managers, Windows Credential Manager, etc",
                        "mitigation_measures": [
                            "Monitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password  or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications."
                        ]
                    },
                    {
                        "title": "Forge of Web Credentials",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: SAML tokens, web cookies",
                        "mitigation_measures": [
                            "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations."
                        ]
                    },
                    {
                        "title": "Monitor Undesired Access to Filesystem and/or Files",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Deploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.(Citation: ADSecurity Finding Passwords in SYSVOL)\"",
                            "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. "
                        ]
                    },
                    {
                        "title": "Multi-Factor Authentication (MFA) Request Generation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism. "
                        ]
                    },
                    {
                        "title": "Stealing of Web Session Cookie",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory."
                        ]
                    },
                    {
                        "title": "Unsecured Credentials: Bash History",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitoring when the user's <code>.bash_history</code> is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like <code>cat ~/.bash_history</code>."
                        ]
                    }
                ]
            },
            {
                "id": "A15",
                "title": "Data Collection",
                "description": "An adversary is trying to gather data of interest to their goal.\nCollection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Data from Cloud Storage",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity."
                        ]
                    },
                    {
                        "title": "Data from Configuration Repository",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Identify network traffic sent or received by untrusted hosts or networks that solicits and obtains the configuration information of the queried device.(Citation: Cisco Advisory SNMP v3 Authentication Vulnerabilities)"
                        ]
                    },
                    {
                        "title": "Data from Local System",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Further, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands may also be used to collect files such as configuration files with built-in features native to the network device platform.(Citation: Mandiant APT41 Global Intrusion )(Citation: US-CERT-TA18-106A) Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "For network infrastructure devices, collect AAA logging to monitor `show` commands that view configuration files. "
                        ]
                    },
                    {
                        "title": "Data from Network Shared Drive",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "Data from Removable Media",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "Data Staged: Local and Remote Data Staging",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "Consider monitoring accesses and modifications to local storage repositories (such as the Windows Registry), especially from suspicious processes that could be related to malicious data collection."
                        ]
                    },
                    {
                        "title": "Email Collection (locally, remote server, email forwarding rule, etc)",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.",
                            "File access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity.",
                            "Monitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "- Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.",
                            "Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include <code>X-MS-Exchange-Organization-AutoForwarded</code> set to true, <code>X-MailFwdBy</code> and <code>X-Forwarded-To</code>. The <code>forwardingSMTPAddress</code> parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) High volumes of emails that bear the <code>X-MS-Exchange-Organization-AutoForwarded</code> header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.",
                            "",
                            "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values.(Citation: Pfammatter - Hidden Inbox Rules)",
                            "Auto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include `X-MS-Exchange-Organization-AutoForwarded` set to true, `X-MailFwdBy` and `X-Forwarded-To`. The `forwardingSMTPAddress` parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) High volumes of emails that bear the `X-MS-Exchange-Organization-AutoForwarded` header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather local email files. Monitor for unusual processes accessing local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            " Monitor for unusual login activity from unknown or abnormal locations, especially for privileged accounts (ex: Exchange administrator account)."
                        ]
                    },
                    {
                        "title": "Screen Capture",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment."
                        ]
                    }
                ]
            },
            {
                "id": "A17",
                "title": "Defense Evasion",
                "description": "An adversary is trying to avoid being detected.\nDefense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics\u2019 techniques are cross-listed here when those techniques include the added benefit of subverting defenses. ",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Build Image on Host",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code."
                        ]
                    },
                    {
                        "title": "Debugger Evasion",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Debugger related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious [Native API](https://attack.mitre.org/techniques/T1106) function calls as well as processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
                            "",
                            "Monitor debugger logs for signs of abnormal and potentially malicious activity."
                        ]
                    },
                    {
                        "title": "Deobfuscate/Decode Files or Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as [certutil](https://attack.mitre.org/software/S0160).",
                            "",
                            "Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior."
                        ]
                    },
                    {
                        "title": "Direct Volume Access",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives. (Citation: Github PowerSploit Ninjacopy)",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through [PowerShell](https://attack.mitre.org/techniques/T1059/001), additional logging of PowerShell scripts is recommended."
                        ]
                    },
                    {
                        "title": "Execution Guardrails",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detecting the use of guardrails may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of [Discovery](https://attack.mitre.org/tactics/TA0007), especially in a short period of time, may aid in detection."
                        ]
                    },
                    {
                        "title": "Exploitation for Defense Evasion",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution or evidence of Discovery."
                        ]
                    },
                    {
                        "title": "File and Directory Permissions Modification",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.",
                            "",
                            "Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)"
                        ]
                    },
                    {
                        "title": "Hidden Artifacts",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Email Hiding Rules, File/Path Exclusions, Hidden File System, Hidden Files and Directories, Hidden Users, Hidden Window, Ignore Process Interrupts, NTFS File Attributes, Process Argument Spoofing, Resource Forking, Run Virtual Instance, VBA Stomping, etc.",
                        "mitigation_measures": [
                            "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage."
                        ]
                    },
                    {
                        "title": "Impaired Defenses",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Disabled or Modified Cloud Firewall, Cloud Logs, Linux Audit System, System Firewall, Tools, Windows Event Logging, Downgraded Attack, Impaired Command History Logging, Indicator Blocking, Safe Mode Boot, Spoof Security Alerting, etc.",
                        "mitigation_measures": [
                            "Monitor processes and command-line arguments to see if security tools or logging services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Lack of log events may be suspicious.",
                            "",
                            "Monitor environment variables and APIs that can be leveraged to disable security measures."
                        ]
                    },
                    {
                        "title": "Impersonation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            " "
                        ]
                    },
                    {
                        "title": "Indicator Removal",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Indicators of Compromise: Clear Command History, Clear Linux or Mac System Logs, Clear Mailbox Data, Clear Network Connection History and Configurations, Clear Persistence, Clear Windows Event Logs, File Deletion, Network Share Connection Removal, Relocate Malware, Timestomp, etc.",
                        "mitigation_measures": [
                            "File system monitoring may be used to detect improper deletion or modification of indicator files.  Events not stored on the file system may require different detection mechanisms."
                        ]
                    },
                    {
                        "title": "Indirect Command Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections. (Citation: RSA Forfiles Aug 2017)"
                        ]
                    },
                    {
                        "title": "Masquerading",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.",
                            "",
                            "If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)",
                            "",
                            "Look for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d."
                        ]
                    },
                    {
                        "title": "Modified Cloud Compute Infrastructure",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Establish centralized logging for the activity of cloud compute infrastructure components. Monitor for suspicious sequences of events, such as the creation of multiple snapshots within a short period of time or the mount of a snapshot to a new instance by a new or unexpected user. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
                        ]
                    },
                    {
                        "title": "Modified Cloud Resource Hierarchy",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            " "
                        ]
                    },
                    {
                        "title": "Modified Registry",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Consider enabling Registry Auditing on specific keys to produce an alertable event (Event ID 4657) whenever a value is changed (though this may not trigger when values are created with Reghide or other evasive methods). (Citation: Microsoft 4657 APR 2017) Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. The Registry may also be modified through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), which may require additional logging features to be configured in the operating system to collect necessary information for analysis.",
                            "",
                            "Monitor for processes, command-line arguments, and API calls associated with concealing Registry keys, such as Reghide. (Citation: Microsoft Reghide NOV 2006) Inspect and cleanup malicious hidden Registry entries using Native Windows API calls and/or tools such as Autoruns (Citation: SpectorOps Hiding Reg Jul 2017) and RegDelNull (Citation: Microsoft RegDelNull July 2016)."
                        ]
                    },
                    {
                        "title": "Modified System Image",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Most embedded network devices provide a command to print the version of the currently running operating system.  Use this command to query the operating system for its version number and compare it to what is expected for the device in question.  Because this method may be used in conjunction with [Patch System Image](https://attack.mitre.org/techniques/T1601/001), it may be appropriate to also verify the integrity of the vendor provided operating system image file. ",
                            "",
                            "Compare the checksum of the operating system file with the checksum of a known good copy from a trusted source.  Some embedded network device platforms may have the capability to calculate the checksum of the file, while others may not.  Even for those platforms that have the capability, it is recommended to download a copy of the file to a trusted computer to calculate the checksum with software that is not compromised.  (Citation: Cisco IOS Software Integrity Assurance - Image File Verification)",
                            "",
                            "Many vendors of embedded network devices can provide advanced debugging support that will allow them to work with device owners to validate the integrity of the operating system running in memory.  If a compromise of the operating system is suspected, contact the vendor technical support and seek such services for a more thorough inspection of the current running system.  (Citation: Cisco IOS Software Integrity Assurance - Run-Time Memory Verification)"
                        ]
                    },
                    {
                        "title": "Network Boundary Bridging",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Consider monitoring network traffic on both interfaces of border network devices with out-of-band packet capture or network flow data, using a different device than the one in question.  Look for traffic that should be prohibited by the intended network traffic policy enforcement for the border network device.",
                            "",
                            "Monitor the border network device\u2019s configuration to validate that the policy enforcement sections are what was intended.  Look for rules that are less restrictive, or that allow specific traffic types that were not previously authorized."
                        ]
                    },
                    {
                        "title": "Obfuscated Files or Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). ",
                            "",
                            "Flag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) ",
                            "",
                            "Obfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. ",
                            "",
                            "The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. "
                        ]
                    },
                    {
                        "title": "Plist File Modification",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for common command-line editors used to modify plist files located in auto-run locations, such as <code>\\~/LaunchAgents</code>, <code>~/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm</code>, and an application's <code>Info.plist</code>. ",
                            "",
                            "Monitor for plist file modification immediately followed by code execution from <code>\\~/Library/Scripts</code> and <code>~/Library/Preferences</code>. Also, monitor for significant changes to any path pointers in a modified plist.",
                            "",
                            "Identify new services executed from plist modified in the previous user's session. "
                        ]
                    },
                    {
                        "title": "Reflective Code Loading",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such as <code>Assembly.Load()</code> and [Native API](https://attack.mitre.org/techniques/T1106) functions such as <code>CreateThread()</code>, <code>memfd_create()</code>, <code>execve()</code>, and/or <code>execveat()</code>.(Citation: 00sec Droppers)(Citation: S1 Old Rat New Tricks)",
                            "",
                            "Monitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe). Similarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.(Citation: MDSec Detecting DOTNET)(Citation: Introducing Donut)",
                            "",
                            "Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. "
                        ]
                    },
                    {
                        "title": "Rogue Domain Controller",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts. (Citation: GitHub DCSYNCMonitor) (Citation: DCShadow Blog) DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). (Citation: DCShadow Blog)",
                            "",
                            "Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies. (Citation: Microsoft DirSync) (Citation: ADDSecurity DCShadow Feb 2018)",
                            "",
                            "Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. (Citation: DCShadow Blog)",
                            "",
                            "Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with \u201cGC/\u201d) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2) can be set without logging. (Citation: ADDSecurity DCShadow Feb 2018) A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete."
                        ]
                    },
                    {
                        "title": "Rootkit",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR. (Citation: Wikipedia Rootkit)"
                        ]
                    },
                    {
                        "title": "Subverted Trust Controls",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Code Signing, Code Signing Policy Modification, Gatekeeper Bypass, Install Root Certificate, Mark-of-the-Web Bypass, SIP and Trust Provider Hijacking, etc.",
                        "mitigation_measures": [
                            "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017) A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.(Citation: SpectorOps Code Signing Dec 2017)",
                            "",
                            "Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.(Citation: SpectorOps Subverting Trust Sept 2017) ",
                            "",
                            "Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr</code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. "
                        ]
                    },
                    {
                        "title": "System Binary Proxy Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.",
                            "",
                            "Monitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity."
                        ]
                    },
                    {
                        "title": "System Script Proxy Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files."
                        ]
                    },
                    {
                        "title": "Template Injection",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze process behavior to determine if user document applications (such as Office) are performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: [PowerShell](https://attack.mitre.org/techniques/T1059/001)), or other suspicious actions that could relate to post-compromise behavior.",
                            "",
                            "Monitor .rtf files for strings indicating the <code>&#42;\\template</code> control word has been modified to retrieve a URL resource, such as <code>&#42;\\template http</code> or <code>&#42;\\template \\u-</code>."
                        ]
                    },
                    {
                        "title": "Trusted Developer Utilities Proxy Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for abnormal presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.",
                            "",
                            "Use process monitoring to monitor the execution and arguments of from developer utilities that may be abused. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed."
                        ]
                    },
                    {
                        "title": "Unused/Unsupported Cloud Regions",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.(Citation: CloudSploit - Unused AWS Regions)"
                        ]
                    },
                    {
                        "title": "Virtualization/Sandbox Evasion",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection."
                        ]
                    },
                    {
                        "title": "XSL Script Processing",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). (Citation: LOLBAS Wmic) (Citation: Twitter SquiblyTwo Detection APR 2018) Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.",
                            "",
                            "The presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious."
                        ]
                    }
                ]
            },
            {
                "id": "A23",
                "title": "Error Handling and Logging",
                "description": "Proper error handling and logging are crucial for detecting and responding to security incidents. Logs should be comprehensive and secure, providing valuable information for forensic analysis without exposing sensitive data",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Error Handling",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that a generic message is shown when an unexpected or security sensitive error occurs, potentially with a unique ID which support personnel can use to investigate. ([C10](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that exception handling (or a functional equivalent) is used across the codebase to account for expected and unexpected error conditions. ([C10](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that a \"last resort\" error handler is defined which will catch all unhandled exceptions. ([C10](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Errors, Logging and Auditing Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that a common logging format and approach is used across the system. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that logs are securely transmitted to a preferably remote system for analysis, detection, alerting, and escalation. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Log Content",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application does not log credentials or payment details. Session tokens should only be stored in logs in an irreversible, hashed form. ([C9, C10](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application does not log other sensitive data as defined under local privacy laws or relevant security policy. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that the application logs security relevant events including successful and failed authentication events, access control failures, deserialization failures and input validation failures. ([C5, C7](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that each log event includes necessary information that would allow for a detailed investigation of the timeline when an event happens. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    },
                    {
                        "title": "Log Processing",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that all authentication decisions are logged, without storing sensitive session tokens or passwords. This should include requests with relevant metadata needed for security investigations.",
                            "Verify that all access control decisions can be logged and all failed decisions are logged. This should include requests with relevant metadata needed for security investigations."
                        ]
                    },
                    {
                        "title": "Log Protection",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that all logging components appropriately encode data to prevent log injection. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that security logs are protected from unauthorized access and modification. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that time sources are synchronized to the correct time and time zone. Strongly consider logging only in UTC if systems are global to assist with post-incident forensic analysis. ([C9](https://owasp.org/www-project-proactive-controls/#div-numbering))"
                        ]
                    }
                ]
            },
            {
                "id": "A24",
                "title": "Execution",
                "description": "An adversary is trying to run malicious code.\nExecution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery. ",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Cloud Administration Command",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            " "
                        ]
                    },
                    {
                        "title": "Command and Scripting Interpreter",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Examples of interpreters: AppleScript, AutoHotKey & AutoIT, Cloud API, JavaScript, Lua, Network Device CLI, PowerShell, Python, Unix Shell, Visual Basic, Windows Command Shell",
                        "mitigation_measures": [
                            "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.",
                            "",
                            "If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.",
                            "",
                            "Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script."
                        ]
                    },
                    {
                        "title": "Container Administration Command",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster. "
                        ]
                    },
                    {
                        "title": "Exploitation for Client Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system."
                        ]
                    },
                    {
                        "title": "Inter-Process Communication",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for strings in files/commands, loaded DLLs/libraries, or spawned processes that are associated with abuse of IPC mechanisms."
                        ]
                    },
                    {
                        "title": "Native API",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. ",
                            "",
                            "Utilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. "
                        ]
                    },
                    {
                        "title": "Serverless Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            " "
                        ]
                    },
                    {
                        "title": "Shared Modules",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to `%SystemRoot%` and `%ProgramFiles%` directories will protect against module loads from unsafe paths. ",
                            "",
                            "Correlation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior."
                        ]
                    },
                    {
                        "title": "System Services",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for command line invocations of tools capable of modifying services that doesn\u2019t correspond to normal usage patterns and known software, patch cycles, etc. Also monitor for changes to executables and other files associated with services. Changes to Windows services may also be reflected in the Registry."
                        ]
                    },
                    {
                        "title": "System Services: Launchctl",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Every Launch Agent and Launch Daemon must have a corresponding plist file on disk which can be monitored. Monitor for recently modified or created plist files with a significant change to the executable path executed with the command-line <code>launchctl</code> command. Plist files are located in the root, system, and users <code>/Library/LaunchAgents</code> or <code>/Library/LaunchDaemons</code> folders. ",
                            "",
                            "Monitor command-line execution of the <code>launchctl</code> command immediately followed by abnormal network connections. [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s with executable paths pointing to <code>/tmp</code> and <code>/Shared</code> folders locations are potentially suspicious. ",
                            "",
                            "When removing [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s ensure the services are unloaded prior to deleting plist files."
                        ]
                    },
                    {
                        "title": "System Services: Service Execution",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool [PsExec](https://attack.mitre.org/software/S0029)."
                        ]
                    },
                    {
                        "title": "User Interaction: Execution of Malicious Files or Links",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) in payloads.",
                            "",
                            "Anti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe)."
                        ]
                    },
                    {
                        "title": "Windows Management Instrumentation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of \"wmic\" and detect commands that are used to perform remote behavior. (Citation: FireEye WMI 2015)"
                        ]
                    }
                ]
            },
            {
                "id": "A25",
                "title": "Exfiltration",
                "description": "An adversary is trying to steal data.\nExfiltration consists of techniques that adversaries may use to steal data from your network. Once they\u2019ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Automated Exfiltration",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious."
                        ]
                    },
                    {
                        "title": "Data Transfer Size Limits",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Exfiltration Over Alternative Protocol",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol, Exfiltration Over Symmetric Encrypted Non-C2 Protocol, Exfiltration Over Unencrypted Non-C2 Protocol, ",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Exfiltration Over C2 Channel",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Exfiltration Over Other Network Medium",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.:  Exfiltration Over Bluetooth",
                        "mitigation_measures": [
                            "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.",
                            "",
                            "Monitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces."
                        ]
                    },
                    {
                        "title": "Exfiltration Over Physical Medium",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Exfiltration over USB",
                        "mitigation_measures": [
                            "Monitor file access on removable media. Detect processes that execute when removable media are mounted."
                        ]
                    },
                    {
                        "title": "Exfiltration Over Web Service",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Exfiltration Over Webhook, Exfiltration to Cloud Storage, Exfiltration to Code Repository, Exfiltration to Text Storage Sites",
                        "mitigation_measures": [
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity."
                        ]
                    },
                    {
                        "title": "Scheduled Transfer",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious."
                        ]
                    },
                    {
                        "title": "Transfer Data to Cloud Account",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor account activity for attempts to share data, snapshots, or backups with untrusted or unusual accounts on the same cloud service provider. Monitor for anomalous file transfer activity between accounts and to untrusted VPCs. ",
                            "",
                            "In AWS, sharing an Elastic Block Store (EBS) snapshot, either with specified users or publicly, generates a ModifySnapshotAttribute event in CloudTrail logs.(Citation: AWS EBS Snapshot Sharing) Similarly, in Azure, creating a Shared Access Signature (SAS) URI for a Virtual Hard Disk (VHS) snapshot generates a \"Get Snapshot SAS URL\" event in Activity Logs.(Citation: Azure Blob Snapshots)(Citation: Azure Shared Access Signature)"
                        ]
                    }
                ]
            },
            {
                "id": "A27",
                "title": "Impact",
                "description": "An adversary is trying to manipulate, interrupt, or destroy your systems and data.\nImpact consists of techniques that adversaries use to disrupt availability or compromise integrity by manipulating business and operational processes. Techniques used for impact can include destroying or tampering with data. In some cases, business processes can look fine, but may have been altered to benefit the adversaries\u2019 goals. These techniques might be used by adversaries to follow through on their end goal or to provide cover for a confidentiality breach.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Account Access Removal",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use process monitoring to monitor the execution and command line parameters of binaries involved in deleting accounts or changing passwords, such as use of [Net](https://attack.mitre.org/software/S0039). Windows event logs may also designate activity associated with an adversary's attempt to remove access to an account:",
                            "",
                            "* Event ID 4723 - An attempt was made to change an account's password",
                            "* Event ID 4724 - An attempt was made to reset an account's password",
                            "* Event ID 4726 - A user account was deleted",
                            "* Event ID 4740 - A user account was locked out",
                            "",
                            "Alerting on [Net](https://attack.mitre.org/software/S0039) and these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible."
                        ]
                    },
                    {
                        "title": "Data Destruction",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as [SDelete](https://attack.mitre.org/software/S0195). Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under <code>C:\\Windows\\System32\\</code>.",
                            "",
                            "In cloud environments, the occurrence of anomalous high-volume deletion events, such as the <code>DeleteDBCluster</code> and <code>DeleteGlobalCluster</code> events in AWS, or a high quantity of data deletion events, such as <code>DeleteBucket</code>, within a short period of time may indicate suspicious activity."
                        ]
                    },
                    {
                        "title": "Data Encrypted for Impact",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories.",
                            "",
                            "In some cases, monitoring for unusual kernel driver installation activity can aid in detection.",
                            "",
                            "In cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies."
                        ]
                    },
                    {
                        "title": "Data Manipulation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Manipulated Data can come from: Runtime Data Manipulation, Stored Data Manipulation, Transmitted Data Manipulation, ",
                        "mitigation_measures": [
                            "Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data."
                        ]
                    },
                    {
                        "title": "Defacement",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
                            "",
                            ""
                        ]
                    },
                    {
                        "title": "Disk Wipe",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Look for attempts to read/write to sensitive locations like the partition boot sector, master boot record, disk partition table, or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the <code>\\\\\\\\.\\\\</code> notation.(Citation: Microsoft Sysmon v6 May 2017) Monitor for unusual kernel driver installation activity."
                        ]
                    },
                    {
                        "title": "Endpoint Denial of Service",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.(Citation: Cisco DoSdetectNetflow) Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.",
                            "",
                            "In addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.",
                            "",
                            "Externally monitor the availability of services that may be targeted by an Endpoint DoS."
                        ]
                    },
                    {
                        "title": "Financial Theft",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            " "
                        ]
                    },
                    {
                        "title": "Firmware Corruption",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System firmware manipulation may be detected.(Citation: MITRE Trustworthy Firmware Measurement) Log attempts to read/write to BIOS and compare against known patching behavior."
                        ]
                    },
                    {
                        "title": "Inhibit System Recovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, bcdedit, REAgentC, and diskshadow. The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity.",
                            "",
                            "Monitor the status of services involved in system recovery. Monitor the registry for changes associated with system recovery features (ex: the creation of <code>HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage</code>).",
                            "",
                            "For network infrastructure devices, collect AAA logging to monitor for `erase`, `format`, and `reload` commands being run in succession."
                        ]
                    },
                    {
                        "title": "Network Denial of Service",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow(Citation: Cisco DoSdetectNetflow), SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation."
                        ]
                    },
                    {
                        "title": "Resource Hijacking",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Consider monitoring process resource usage to determine anomalous activity associated with malicious hijacking of computer resources such as CPU, memory, and graphics processing resources. Monitor for suspicious use of network resources associated with cryptocurrency mining software. Monitor for common cryptomining software process names and files on local systems that may indicate compromise and resource usage."
                        ]
                    },
                    {
                        "title": "Service Stop",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor processes and command-line arguments to see if critical processes are terminated or stop running.",
                            "",
                            "Monitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at <code>HKLM\\SYSTEM\\CurrentControlSet\\Services</code>. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links.",
                            "",
                            "Alterations to the service binary path or the service startup type changed to disabled may be suspicious.",
                            "",
                            "Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, <code>ChangeServiceConfigW</code> may be used by an adversary to prevent services from starting.(Citation: Talos Olympic Destroyer 2018)"
                        ]
                    },
                    {
                        "title": "System Shutdown/Reboot",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006. Unexpected or unauthorized commands from network cli on network devices may also be associated with shutdown/reboot, e.g. the <code>reload</code> command."
                        ]
                    }
                ]
            },
            {
                "id": "A28",
                "title": "Information Gathering and Metrics",
                "description": "Information gathering and metrics involve collecting data on security performance and incidents to inform decision-making and improve security posture. This includes tracking metrics like the number of vulnerabilities detected, response times, and compliance with security policies.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Advanced app. metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "All defects from the dimension Test- and Verification are instrumented."
                        ]
                    },
                    {
                        "title": "Advanced availability and stability metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Advanced metrics are gathered in relation to availability and stability. For example unplanned downtime's per year."
                        ]
                    },
                    {
                        "title": "Alerting",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Thresholds for metrics are set. In case the thresholds are reached, alarms are send out. Which should get attention due to the critically."
                        ]
                    },
                    {
                        "title": "Audit of system events",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Gathering of system calls."
                        ]
                    },
                    {
                        "title": "Coverage and control metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of Coverage- and control-metrics to show the effectiveness of the security program. Coverage is the degree in which a specific security control for a specific target group is applied with all resources. The control degree shows the actual application of security standards and security-guidelines. Examples are gathering information on anti-virus, anti-rootkits, patch management, server configuration and vulnerability management."
                        ]
                    },
                    {
                        "title": "Deactivation of unused metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Deactivation of unused metrics helps to free resources."
                        ]
                    },
                    {
                        "title": "Defense metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Gathering of defense metrics like TCP/UDP sources enables to assume the geographic location of the request. Assuming a Kubernetes cluster with an egress-traffic filter (e.g. IP/domain based), an alert might be send out in case of every violation. For ingress-traffic, alerting might not even be considered."
                        ]
                    },
                    {
                        "title": "Generation of response statistics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Creation and response statistics (e.g. Mean Time to Resolution) of findings. This is also referred to as _Mean Time to Resolve_."
                        ]
                    },
                    {
                        "title": "Grouping of metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Meaningful grouping of metrics helps to speed up analysis."
                        ]
                    },
                    {
                        "title": "Metrics are combined with tests",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Metrics during tests helps to identify programming errors."
                        ]
                    },
                    {
                        "title": "Monitoring of costs",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Implement cost budgets. Setting of an alert threshold and sending out errors when it is reached. In the best case, a second threshold with a limit is set so that the cost can not go higher."
                        ]
                    },
                    {
                        "title": "Patching mean time to resolution via production",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Measurement and communication of the time from the availability of a patch to its deployment in production in alignment with Service Level Agreements (SLAs), conducted at least on a quarterly basis. Average time to patch is visualized per component/project/team."
                        ]
                    },
                    {
                        "title": "Screens with metric visualization",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By having an internal accessible screen with a security related dashboards helps to visualize incidents."
                        ]
                    },
                    {
                        "title": "Simple application metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Gathering of application metrics helps to identify incidents like brute force attacks, login/logout patterns, and unusual spikes in activity. Key metrics to monitor include: - Authentication attempts (successful/failed logins) - Transaction volumes and patterns (e.g. orders, payments) - API call rates and response times - User session metrics - Resource utilization Example: An e-commerce application normally processes 100 orders per hour. A sudden spike to 1000 orders per hour could indicate either: - A legitimate event (unannounced marketing campaign, viral social media post) - A security incident (automated bulk purchase bots, credential stuffing attack) By monitoring these basic metrics, teams can quickly investigate abnormal patterns and determine if they represent security incidents requiring response."
                        ]
                    },
                    {
                        "title": "Simple budget metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Cloud providers often provide insight into budgets. A threshold and alarming for the budget is set."
                        ]
                    },
                    {
                        "title": "Simple system metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Gathering of system metrics helps to identify incidents and specially bottlenecks like in CPU usage, memory usage and hard disk usage."
                        ]
                    },
                    {
                        "title": "Targeted alerting",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By the definition of target groups for incidents people are only getting alarms for incidents they are in charge for."
                        ]
                    },
                    {
                        "title": "Visualized metrics",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Metrics are visualized in real time in a user friendly way."
                        ]
                    }
                ]
            },
            {
                "id": "A30",
                "title": "Initial Access",
                "description": "An adversary is trying to get into your network.\nInitial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Drive-by Compromise",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.",
                            "",
                            "Network intrusion detection systems, sometimes with SSL/TLS inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.",
                            "",
                            "Detecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system."
                        ]
                    },
                    {
                        "title": "Exploit Public-Facing Application",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation."
                        ]
                    },
                    {
                        "title": "Hardware Additions",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. ",
                            "",
                            "Endpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports."
                        ]
                    },
                    {
                        "title": "Phishing",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.",
                            "",
                            "Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)",
                            "",
                            "URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.",
                            "",
                            "Because most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.",
                            "",
                            "Anti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once [User Execution](https://attack.mitre.org/techniques/T1204) occurs."
                        ]
                    },
                    {
                        "title": "Supply Chain Compromise",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. Perform physical inspection of hardware to look for potential tampering."
                        ]
                    },
                    {
                        "title": "Trusted Relationship",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Establish monitoring for activity conducted by second and third party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation, especially if the trusted relationship is based on IT services. Adversaries may be able to act quickly towards an objective, so proper monitoring for behavior related to Credential Access, Lateral Movement, and Collection will be important to detect the intrusion."
                        ]
                    }
                ]
            },
            {
                "id": "A31",
                "title": "Lateral Movement",
                "description": "An adversary is trying to move through your environment.\nLateral Movement consists of techniques that adversaries use to enter and control remote systems on a network. Following through on their primary objective often requires exploring the network to find their target and subsequently gaining access to it. Reaching their objective often involves pivoting through multiple systems and accounts to gain. Adversaries might install their own remote access tools to accomplish Lateral Movement or use legitimate credentials with native network and operating system tools, which may be stealthier. ",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Exploitation of Remote Services",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, evidence of [Discovery](https://attack.mitre.org/tactics/TA0007), or other unusual network traffic that may indicate additional tools transferred to the system."
                        ]
                    },
                    {
                        "title": "Internal Spearphishing",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Network intrusion detection systems and email gateways usually do not scan internal email, but an organization can leverage the journaling-based solution which sends a copy of emails to a security service for offline analysis or incorporate service-integrated solutions using on-premise or API-based integrations to help detect internal spearphishing campaigns.(Citation: Trend Micro When Phishing Starts from the Inside 2017)"
                        ]
                    },
                    {
                        "title": "Lateral Tool Transfer",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for file creation and files transferred within a network using protocols such as SMB or FTP. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts."
                        ]
                    },
                    {
                        "title": "Remote Service Session Hijacking",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Use of these services may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with that service. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.",
                            "",
                            "Monitor for processes and command-line arguments associated with hijacking service sessions."
                        ]
                    },
                    {
                        "title": "Remote Services",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. ",
                            "",
                            "Use of applications such as ARD may be legitimate depending on the environment and how it\u2019s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using these applications. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. ",
                            "",
                            "In macOS, you can review logs for \"screensharingd\" and \"Authentication\" event messages. Monitor network connections regarding remote management (ports tcp:3283 and tcp:5900) and for remote login (port tcp:22).(Citation: Lockboxx ARD 2019)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)"
                        ]
                    },
                    {
                        "title": "Taint Shared Content",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques.",
                            "",
                            "Frequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content."
                        ]
                    }
                ]
            },
            {
                "id": "A32",
                "title": "Logging",
                "description": "Logging refers to the process of recording events and activities within an IT environment to provide a trail of actions for analysis and auditing. This includes capturing logs from applications, systems, and network devices to monitor for suspicious activity and troubleshoot issues.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Centralized application logging",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A centralized logging system is used and applications logs (including application exceptions) are shipped to it."
                        ]
                    },
                    {
                        "title": "Centralized system logging",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "By using centralized logging logs are protected against unauthorized modification."
                        ]
                    },
                    {
                        "title": "Correlation of security events",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Events are correlated on one system. For example the correlation and visualization of failed login attempts combined with successful login attempts."
                        ]
                    },
                    {
                        "title": "Logging of security events",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Implement logging of security relevant events. The following events tend to be security relevant: - successful/failed login/logout - creation, change, and deletion of users - errors during input validation and output creation - exceptions and errors with security in their name - transactions of value (e.g., financial transactions, costly operations) - :unicorn: (special things of your application)",
                        "mitigation_measures": [
                            "Security-relevant events like login/logout or creation, change, deletion of users should be logged."
                        ]
                    },
                    {
                        "title": "PII logging concept",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A concept how to log PII is documented and applied."
                        ]
                    },
                    {
                        "title": "Visualized logging",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Protocols are visualized in a simple to use real time monitoring system. The GUI gives the ability to search for special attributes in the protocol."
                        ]
                    }
                ]
            },
            {
                "id": "A33",
                "title": "Malicious Code",
                "description": "Malicious code (such as viruses, worms, and trojans) is designed to harm or exploit systems. Protecting against malicious code involves using antivirus software, intrusion detection systems, and regular updates to detect and mitigate threats",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Application Integrity",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that if the application has a client or server auto-update feature, updates should be obtained over secure channels and digitally signed. The update code must validate the digital signature of the update before installing or executing the update.",
                            "Verify that the application employs integrity protections, such as code signing or subresource integrity. The application must not load or execute code from untrusted sources, such as loading includes, modules, plugins, code, or libraries from untrusted sources or the Internet.",
                            "Verify that the application has protection from subdomain takeovers if the application relies upon DNS entries or DNS subdomains, such as expired domain names, out of date DNS pointers or CNAMEs, expired projects at public source code repos, or transient cloud APIs, serverless functions, or storage buckets (*autogen-bucket-id*.cloud.example.com) or similar. Protections can include ensuring that DNS names used by applications are regularly checked for expiry or change."
                        ]
                    },
                    {
                        "title": "Code Integrity",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that a code analysis tool is in use that can detect potentially malicious code, such as time functions, unsafe file operations and network connections."
                        ]
                    },
                    {
                        "title": "Malicious Code Search",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application source code and third party libraries do not contain unauthorized phone home or data collection capabilities. Where such functionality exists, obtain the user's permission for it to operate before collecting any data.",
                            "Verify that the application does not ask for unnecessary or excessive permissions to privacy related features or sensors, such as contacts, cameras, microphones, or location.",
                            "Verify that the application source code and third party libraries do not contain back doors, such as hard-coded or additional undocumented accounts or keys, code obfuscation, undocumented binary blobs, rootkits, or anti-debugging, insecure debugging features, or otherwise out of date, insecure, or hidden functionality that could be used maliciously if discovered.",
                            "Verify that the application source code and third party libraries do not contain time bombs by searching for date and time related functions.",
                            "Verify that the application source code and third party libraries do not contain malicious code, such as salami attacks, logic bypasses, or logic bombs.",
                            "Verify that the application source code and third party libraries do not contain Easter eggs or any other potentially unwanted functionality."
                        ]
                    },
                    {
                        "title": "Malicious Software Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that a source code control system is in use, with procedures to ensure that check-ins are accompanied by issues or change tickets. The source code control system should have access control and identifiable users to allow traceability of any changes."
                        ]
                    },
                    {
                        "title": "Obtain Malware Capabilities",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific Malware-as-a-Service (MaaS) offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster.(Citation: FireEyeSupplyChain) Malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in [Cobalt Strike](https://attack.mitre.org/software/S0154) payloads.(Citation: Analyzing CS Dec 2020)",
                            "",
                            "Consider use of services that may aid in the tracking of newly issued certificates and/or certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.(Citation: Splunk Kovar Certificates 2017) Some server-side components of adversary tools may have default values set for SSL/TLS certificates.(Citation: Recorded Future Beacon Certificates)",
                            "",
                            "Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control."
                        ]
                    }
                ]
            },
            {
                "id": "A35",
                "title": "Persistence",
                "description": "An adversary is trying to maintain their foothold.\nPersistence consists of techniques that adversaries use to keep access to systems across restarts, changed credentials, and other interruptions that could cut off their access. Techniques used for persistence include any access, action, or configuration changes that let them maintain their foothold on systems, such as replacing or hijacking legitimate code or adding startup code. ",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Browser Extensions",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.",
                            "",
                            "Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.",
                            "",
                            "On macOS, monitor the command line for usage of the profiles tool, such as <code>profiles install -type=configuration</code>. Additionally, all installed extensions maintain a <code>plist</code> file in the <code>/Library/Managed Preferences/username/</code> directory. Ensure all listed files are in alignment with approved extensions.(Citation: xorrior chrome extensions macOS)"
                        ]
                    },
                    {
                        "title": "Compromised Host Software Binary",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment. Look for changes to client software that do not correlate with known software or patch cycles. ",
                            "",
                            "Consider monitoring for anomalous behavior from client applications, such as atypical module loads, file reads/writes, or network connections."
                        ]
                    },
                    {
                        "title": "Implant Internal Image",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor interactions with images and containers by users to identify ones that are added or modified anomalously.",
                            "",
                            "In containerized environments, changes may be detectable by monitoring the Docker daemon logs or setting up and monitoring Kubernetes audit logs depending on registry configuration. "
                        ]
                    },
                    {
                        "title": "Office Application Startup",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Specifically verify the trustworthiness of the source of Add-ins, Office Template Macros, Office Test, Outlook Forms, Outlook Home Page and Outlook Rules. ",
                        "mitigation_measures": [
                            "Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.",
                            "",
                            "Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.(Citation: CrowdStrike Outlook Forms)(Citation: Outlook Today Home Page)",
                            "",
                            "Microsoft has released a PowerShell script to safely gather mail forwarding rules and custom forms in your mail environment as well as steps to interpret the output.(Citation: Microsoft Detect Outlook Forms) SensePost, whose tool [Ruler](https://attack.mitre.org/software/S0358) can be used to carry out malicious rules, forms, and Home Page attacks, has released a tool to detect Ruler usage.(Citation: SensePost NotRuler)"
                        ]
                    },
                    {
                        "title": "Power Settings",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Command-line invocation of tools capable of modifying services may be unusual and can be monitored for and alerted on, depending on how systems are typically used in a particular environment. ",
                            ""
                        ]
                    },
                    {
                        "title": "Server Software Component",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.",
                            "",
                            "Process monitoring may be used to detect servers components that perform suspicious actions such as running cmd.exe or accessing files. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells) "
                        ]
                    },
                    {
                        "title": "Uncontrolled Account Creation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for processes and command-line parameters associated with account creation, such as <code>net user</code> or <code>useradd</code>. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.",
                            "",
                            "Collect usage logs from cloud administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins."
                        ]
                    }
                ]
            },
            {
                "id": "A36",
                "title": "Privilege Escalation",
                "description": "An adversary is trying to gain higher-level permissions.\nPrivilege Escalation consists of techniques that adversaries use to gain higher-level permissions on a system or network. Adversaries can often enter and explore a network with unprivileged access but require elevated permissions to follow through on their objectives. Common approaches are to take advantage of system weaknesses, misconfigurations, and vulnerabilities. Examples of elevated access include: \n\n* SYSTEM/root level\n* local administrator\n* user account with admin-like access \n* user accounts with access to specific system or perform specific function\n\nThese techniques often overlap with Persistence techniques, as OS features that let an adversary persist can execute in an elevated context.  ",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Escape to Host",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as <code>mount</code> (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations."
                        ]
                    },
                    {
                        "title": "Exploitation for Privilege Escalation",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution or evidence of Discovery. Consider monitoring for the presence or loading (ex: Sysmon Event ID 6) of known vulnerable drivers that adversaries may drop and exploit to execute code in kernel mode.(Citation: Microsoft Driver Block Rules)",
                            "",
                            "Higher privileges are often necessary to perform additional actions such as some methods of [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). Look for additional activity that may indicate an adversary has gained higher privileges."
                        ]
                    }
                ]
            },
            {
                "id": "A37",
                "title": "Reconnaissance / Discovery",
                "description": "An adversary is trying to figure out your environment, gathering information they can use to plan future operations.\nDiscovery consists of techniques an adversary may use to gain knowledge about the system and internal network. These techniques help adversaries observe the environment and orient themselves before deciding how to act. They also allow adversaries to explore what they can control and what\u2019s around their entry point in order to discover how it could benefit their current objective. Native operating system tools are often used toward this post-compromise information-gathering objective. \nReconnaissance consists of techniques that involve adversaries actively or passively gathering information that can be used to support targeting. Such information may include details of the victim organization, infrastructure, or staff/personnel. This information can be leveraged by the adversary to aid in other phases of the adversary lifecycle, such as using gathered information to plan and execute Initial Access, to scope and prioritize post-compromise objectives, or to drive and lead further Reconnaissance efforts.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Account Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "Monitor for processes that can be used to enumerate user accounts, such as <code>net.exe</code> and <code>net1.exe</code>, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)"
                        ]
                    },
                    {
                        "title": "Active Scanning",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "Active Scanning examples: Scanning IP Blocks, Vulnerability Scanning, Wordlist Scanning",
                        "mitigation_measures": [
                            "Monitor for suspicious network traffic that could be indicative of scanning, such as large quantities originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.",
                            "",
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Application Window Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "Browser Information Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained."
                        ]
                    },
                    {
                        "title": "Cloud Infrastructure Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Establish centralized logging for the activity of cloud infrastructure components. Monitor logs for actions that could be taken to gather information about cloud infrastructure, including the use of discovery API calls by new or unexpected users and enumerations from unknown or malicious IP addresses. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones."
                        ]
                    },
                    {
                        "title": "Cloud Service Dashboard",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.(Citation: AWS Console Sign-in Events)"
                        ]
                    },
                    {
                        "title": "Cloud Service Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Cloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Normal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment."
                        ]
                    },
                    {
                        "title": "Cloud Storage Object Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained. ",
                            "Monitor cloud logs for API calls used for file or object enumeration for unusual activity. "
                        ]
                    },
                    {
                        "title": "Container and Resource Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level.",
                            "",
                            "Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications. "
                        ]
                    },
                    {
                        "title": "Device Driver Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            " "
                        ]
                    },
                    {
                        "title": "Domain Trust Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with [Domain Trust Discovery](https://attack.mitre.org/techniques/T1482).(Citation: Harmj0y Domain Trusts) Information may also be acquired through Windows system management tools such as [PowerShell](https://attack.mitre.org/techniques/T1059/001). The .NET method `GetAllTrustRelationships()` can be an indicator of [Domain Trust Discovery](https://attack.mitre.org/techniques/T1482).(Citation: Microsoft GetAllTrustRelationships)",
                            ""
                        ]
                    },
                    {
                        "title": "File and Directory Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). Further, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands may also be used to gather file and directory information with built-in features native to the network device platform.  Monitor CLI activity for unexpected or unauthorized use of commands being run by non-standard users from non-standard locations.  "
                        ]
                    },
                    {
                        "title": "Gather Victim Host Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Client Configurations, Firmware, Hardware, Software",
                        "mitigation_measures": [
                            "Internet scanners may be used to look for patterns associated with malicious content designed to collect host information from visitors.(Citation: ThreatConnect Infrastructure Dec 2020)(Citation: ATT ScanBox)",
                            "",
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Gather Victim Identity Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Credentials, Email Addresses, Employee Names",
                        "mitigation_measures": [
                            "Monitor for suspicious network traffic that could be indicative of probing for user information, such as large/iterative quantities of authentication requests originating from a single source (especially if the source is known to be associated with an adversary/botnet). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields.",
                            "",
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Gather Victim Network Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: DNS, Domain Properties, IP Addresses, Network Security Appliances, Network Topology, Network Trust Dependencies, etc.",
                        "mitigation_measures": [
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Gather Victim Org Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "e.g.: Business Relationships, Determine Physical Locations, Identify Business Tempo, Identify Roles, etc.",
                        "mitigation_measures": [
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Group Policy Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor for suspicious use of <code>gpresult</code>. Monitor for the use of PowerShell functions such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code> and processes spawning with command-line arguments containing <code>GPOLocalGroup</code>.",
                            "",
                            "Monitor for abnormal LDAP queries with filters for <code>groupPolicyContainer</code> and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed."
                        ]
                    },
                    {
                        "title": "Log Enumeration",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": "Log Enumeration"
                    },
                    {
                        "title": "Network Service Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans."
                        ]
                    },
                    {
                        "title": "Network Share Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "Password Policy Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity."
                        ]
                    },
                    {
                        "title": "Peripheral Device Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "Permission Groups Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as <code>kubectl auth can-i</code>.(Citation: K8s Authorization Overview)"
                        ]
                    },
                    {
                        "title": "Phishing for Information",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Depending on the specific method of phishing, the detections can vary. Monitor for suspicious email activity, such as numerous accounts receiving messages from a single unusual/unknown sender. Filtering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)",
                            "",
                            "When it comes to following links, monitor for references to uncategorized or known-bad sites. URL inspection within email (including expanding shortened links) can also help detect links leading to known malicious sites.",
                            "",
                            "Monitor social media traffic for suspicious activity, including messages requesting information as well as abnormal file or data transfers (especially those involving unknown, or otherwise suspicious accounts)."
                        ]
                    },
                    {
                        "title": "Process Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "For network infrastructure devices, collect AAA logging to monitor for `show` commands being run by non-standard users from non-standard locations."
                        ]
                    },
                    {
                        "title": "Query Registry",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Interaction with the Windows Registry may come from the command line using utilities such as [Reg](https://attack.mitre.org/software/S0075) or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "Remote System Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "Monitor for processes that can be used to discover remote systems, such as <code>ping.exe</code> and <code>tracert.exe</code>, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)"
                        ]
                    },
                    {
                        "title": "Search Closed Sources",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Search Open Technical Databases",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Search Open Websites/Domains",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.",
                            "",
                            "Detection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access."
                        ]
                    },
                    {
                        "title": "Search Victim-Owned Websites",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for suspicious network traffic that could be indicative of adversary reconnaissance, such as rapid successions of requests indicative of web crawling and/or large quantities of requests originating from a single source (especially if the source is known to be associated with an adversary). Analyzing web metadata may also reveal artifacts that can be attributed to potentially malicious activity, such as referer or user-agent string HTTP/S fields."
                        ]
                    },
                    {
                        "title": "Software Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "System Information Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands may also be used to gather  detailed system information with built-in features native to the network device platform.  Monitor CLI activity for unexpected or unauthorized use  commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "In cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations."
                        ]
                    },
                    {
                        "title": "System Location Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling <code> GetLocaleInfoW</code> to gather information.(Citation: FBI Ragnar Locker 2020)",
                            "",
                            "Monitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo."
                        ]
                    },
                    {
                        "title": "System Network Configuration Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, {{LinkById|T1059.008} commands may also be used to gather system and network information with built-in features native to the network device platform.  Monitor CLI activity for unexpected or unauthorized use  commands being run by non-standard users from non-standard locations.  Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "System Network Connections Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Further, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands may also be used to gather system and network information with built-in features native to the network device platform.  Monitor CLI activity for unexpected or unauthorized use commands being run by non-standard users from non-standard locations. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "System Owner/User Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "`System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).",
                            "",
                            "For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations."
                        ]
                    },
                    {
                        "title": "System Service Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.",
                            "",
                            "Monitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001)."
                        ]
                    },
                    {
                        "title": "System Time Discovery",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.",
                            "",
                            "For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D08",
        "title": "Systems Security",
        "description": "Systems security focuses on protecting computer systems and networks from cyber threats. This includes implementing measures like firewalls, intrusion detection systems, and regular updates to safeguard against unauthorized access, data breaches, and other malicious activities",
        "areas": [
            {
                "id": "A09",
                "title": "Cloud environment (Infrastructure as Code)",
                "description": "IaC enhances security by enabling the integration of security checks directly into the code, ensuring that configurations are secure before deployment. This helps prevent misconfigurations, reduces the risk of human error, and allows for continuous monitoring and compliance",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Dynamic Resolution: DNS Calculation (ingress service w load balancer)",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more (Citation: Data Driven Security DGA). CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains."
                        ]
                    },
                    {
                        "title": "Encrypted Channel Networks and environment visibility (namespaces)",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)",
                            "",
                            "In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)"
                        ]
                    },
                    {
                        "title": "Hidden or Uncontrolled Infrastructure",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analyse the cloud environment and create an inventory of all resources managed by the organization and/or present in the cluster"
                        ]
                    },
                    {
                        "title": "Ingress Tool Transfer",
                        "category": "MITTRE ATT&CK",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as [ftp](https://attack.mitre.org/software/S0095), that does not normally occur may also be suspicious.",
                            "",
                            "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)"
                        ]
                    }
                ]
            },
            {
                "id": "A12",
                "title": "Configuration",
                "description": "Security configuration management involves setting up systems and applications with secure default settings and continuously monitoring for misconfigurations that could lead to vulnerabilities",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Configuration Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the segregation of components of differing trust levels through well-defined security controls, firewall rules, API gateways, reverse proxies, cloud-based security groups, or similar mechanisms.",
                            "Verify that binary signatures, trusted connections, and verified endpoints are used to deploy binaries to remote devices.",
                            "Verify that the build pipeline warns of out-of-date or insecure components and takes appropriate actions.",
                            "Verify that the build pipeline contains a build step to automatically build and verify the secure deployment of the application, particularly if the application infrastructure is software defined, such as cloud environment build scripts.",
                            "Verify that application deployments adequately sandbox, containerize and/or isolate at the network level to delay and deter attackers from attacking other applications, especially when they are performing sensitive or dangerous actions such as deserialization. ([C5](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify the application does not use unsupported, insecure, or deprecated client-side technologies such as NSAPI plugins, Flash, Shockwave, ActiveX, Silverlight, NACL, or client-side Java applets."
                        ]
                    },
                    {
                        "title": "Unintended Security Disclosure",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that web or application server and application framework debug modes are disabled in production to eliminate debug features, developer consoles, and unintended security disclosures.",
                            "Verify that the HTTP headers or any part of the HTTP response do not expose detailed version information of system components."
                        ]
                    }
                ]
            },
            {
                "id": "A38",
                "title": "Secure Communications",
                "description": "Data exchange is the norm in modern applications, especially web-based ones. To ensure security, this area covers all configurations related to data communications that interact with the layer 7 (Application) and/or layer 4 (Transport) of the OSI layer model. Some examples include encrypted communications to prevent attackers from intercepting and reading data, like enabling HTTPS, or using secure reverse proxy configurations, including a layer of protection and obfuscation, load balancing capabilities, etc.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Client Communication Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that TLS is used for all client connectivity, and does not fall back to insecure or unencrypted communications. ([C8](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify using up to date TLS testing tools that only strong cipher suites are enabled, with the strongest cipher suites set as preferred.",
                            "Verify that only the latest recommended versions of the TLS protocol are enabled, such as TLS 1.2 and TLS 1.3. The latest version of the TLS protocol should be the preferred option."
                        ]
                    },
                    {
                        "title": "Communications Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify the application encrypts communications between components, particularly when these components are in different containers, systems, sites, or cloud providers. ([C3](https://owasp.org/www-project-proactive-controls/#div-numbering))",
                            "Verify that application components verify the authenticity of each side in a communication link to prevent person-in-the-middle attacks. For example, application components should validate TLS certificates and chains."
                        ]
                    },
                    {
                        "title": "HTTP Request Header Validation",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that the application server only accepts the HTTP methods in use by the application/API, including pre-flight OPTIONS, and logs/alerts on any requests that are not valid for the application context.",
                            "Verify that the supplied Origin header is not used for authentication or access control decisions, as the Origin header can easily be changed by an attacker.",
                            "Verify that the Cross-Origin Resource Sharing (CORS) Access-Control-Allow-Origin header uses a strict allow list of trusted domains and subdomains to match against and does not support the \"null\" origin.",
                            "Verify that HTTP headers added by a trusted proxy or SSO devices, such as a bearer token, are authenticated by the application."
                        ]
                    },
                    {
                        "title": "HTTP Security Headers",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that every HTTP response contains a Content-Type header. Also specify a safe character set (e.g., UTF-8, ISO-8859-1) if the content types are text/*, /+xml and application/xml. Content must match with the provided Content-Type header.",
                            "Verify that all API responses contain a Content-Disposition: attachment",
                            "Verify that a Content Security Policy (CSP) response header is in place that helps mitigate impact for XSS attacks like HTML, DOM, JSON, and JavaScript injection vulnerabilities.",
                            "Verify that all responses contain a X-Content-Type-Options: nosniff header.",
                            "Verify that a Strict-Transport-Security header is included on all responses and for all subdomains, such as Strict-Transport-Security: max-age=15724800",
                            "Verify that a suitable Referrer-Policy header is included to avoid exposing sensitive information in the URL through the Referer header to untrusted parties.",
                            "Verify that the content of a web application cannot be embedded in a third-party site by default and that embedding of the exact resources is only allowed where necessary by using suitable Content-Security-Policy: frame-ancestors and X-Frame-Options response headers."
                        ]
                    },
                    {
                        "title": "Secure File Upload Architecture",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that user-uploaded files - if required to be displayed or downloaded from the application - are served by either octet stream downloads, or from an unrelated domain, such as a cloud file storage bucket. Implement a suitable Content Security Policy (CSP) to reduce the risk from XSS vectors or other attacks from the uploaded file."
                        ]
                    },
                    {
                        "title": "Server Communication Security",
                        "category": "OWASP ASVS",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Verify that connections to and from the server use trusted TLS certificates. Where internally generated or self-signed certificates are used, the server must be configured to only trust specific internal CAs and specific self-signed certificates. All others should be rejected.",
                            "Verify that encrypted communications such as TLS is used for all inbound and outbound connections, including for management ports, monitoring, authentication, API, or web service calls, database, cloud, serverless, mainframe, external, and partner connections. The server must not fall back to insecure or unencrypted protocols.",
                            "Verify that all encrypted connections to external systems that involve sensitive information or functions are authenticated.",
                            "Verify that proper certification revocation, such as Online Certificate Status Protocol (OCSP) Stapling, is enabled and configured.",
                            "Verify that backend TLS connection failures are logged."
                        ]
                    }
                ]
            }
        ]
    },
    {
        "id": "D09",
        "title": "Test and Verification",
        "description": "Test and verification involve validating the security of software applications and systems through rigorous testing processes. This includes conducting functional and non-functional tests, security testing, such as static and dynamic analysis, penetration testing, and code reviews, to ensure that security controls are effective and that vulnerabilities are identified and addressed.",
        "areas": [
            {
                "id": "A04",
                "title": "Application tests",
                "description": "Application tests refer to various testing methodologies used to evaluate the security, functionality, and performance of software applications. This includes unit tests, integration tests, security tests, and user acceptance tests to ensure the application meets security and quality standards.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "High coverage of security related module and integration tests",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Implementation of security related tests via unit tests and integration tests. Including the test of libraries, in case the are not tested already."
                        ]
                    },
                    {
                        "title": "Security integration tests for important components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Implementation of essential security related integration tests. For example for authentication and authorization."
                        ]
                    },
                    {
                        "title": "Security unit tests for important components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of unit tests to test important security related features like authentication and authorization."
                        ]
                    },
                    {
                        "title": "Smoke Test",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Integration tests are performed against the production environment after each deployment."
                        ]
                    }
                ]
            },
            {
                "id": "A13",
                "title": "Consolidation",
                "description": "Consolidation in the context of SSDLC and DevSecOps involves combining and integrating various security tools, processes, and systems to streamline operations and improve efficiency. This can include centralizing security management, unifying monitoring systems, and consolidating data storage solutions.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Advanced visualization of defects",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Findings are visualized per component/project/team."
                        ]
                    },
                    {
                        "title": "Fix based on accessibility",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Implement a simple risk-based prioritization framework for vulnerability remediation based on accessibility of the applications."
                        ]
                    },
                    {
                        "title": "Integration of vulnerability issues into the development process",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Vulnerabilities are tracked in the teams issue system (e.g. jira)."
                        ]
                    },
                    {
                        "title": "Reproducible defect tickets",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Vulnerabilities include the test procedure to give the staff from operations and development the ability to reproduce vulnerabilities. This enhances the understanding of vulnerabilities and therefore the fix have a higher quality."
                        ]
                    },
                    {
                        "title": "Simple false positive treatment",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Findings from security tests must be triaged and outcomes persisted/documented to: - Prevent re-analysis of known issues in subsequent test runs - Track accepted risks vs false positives - Enable consistent decision-making across teams At this maturity level, a simple tracking system suffices - tools need only distinguish between \"triaged\" and \"untriaged\" findings, without complex categorization. Some tools refer to this as \"suppression\" of findings. Samples for false positive handling: - [OWASP Dependency Check](https://jeremylong.github.io/DependencyCheck/general/suppression.html) - [Kubescape with VEX](https://kubescape.io/blog/2023/12/07/kubescape-support-for-vex-generation/) - [OWASP DefectDojo Risk Acceptance](https://docs.defectdojo.com/en/working_with_findings/findings_workflows/risk_acceptances/) and [False Positive Handling](https://docs.defectdojo.com/en/working_with_findings/intro_to_findings/#triage-vulnerabilities-using-finding-status)"
                        ]
                    },
                    {
                        "title": "Simple visualization of defects",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Vulnerabilities are simple visualized."
                        ]
                    },
                    {
                        "title": "Treatment of all defects",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "All vulnerabilities are added to the quality gate."
                        ]
                    },
                    {
                        "title": "Treatment of defects with severity high or higher",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Vulnerabilities with severity high or higher are added to the quality gate."
                        ]
                    },
                    {
                        "title": "Treatment of defects with severity middle",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Vulnerabilities with severity middle are added to the quality gate."
                        ]
                    },
                    {
                        "title": "Usage of a vulnerability management system",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "For known vulnerabilities a processes to estimate the exploit ability of a vulnerability is recommended. To implement a security culture including training, office hours and security champions can help integrating security scanning at scale. Such activities help to understand why a vulnerability is potentially critical and needs handling.",
                        "mitigation_measures": [
                            "Aggregation of vulnerabilities in one tool reduce the workload to handle them, e.g. mark as false positives."
                        ]
                    }
                ]
            },
            {
                "id": "A20",
                "title": "Dynamic depth for applications",
                "description": "Dynamic depth for applications refers to the comprehensive analysis and testing of applications in a live or runtime environment. This includes dynamic application security testing (DAST) to identify vulnerabilities that may not be apparent in static code analysis.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Coverage analysis",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Check that there are no missing paths in the application with coverage-tools."
                        ]
                    },
                    {
                        "title": "Coverage of client side dynamic components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of a spider which executes dynamic content like JavaScript, e.g. via Selenium."
                        ]
                    },
                    {
                        "title": "Coverage of hidden endpoints",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Hidden endpoints are getting detected and included in the vulnerability scan."
                        ]
                    },
                    {
                        "title": "Coverage of more input vectors",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Special parameter and special encodings are defined, so that they get fuzzed by the used vulnerability scanners."
                        ]
                    },
                    {
                        "title": "Coverage of sequential operations",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Sequential operations are defined and checked by the vulnerability scanner in the defined order."
                        ]
                    },
                    {
                        "title": "Coverage of service to service communication",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Service to service communication is dumped and checked."
                        ]
                    },
                    {
                        "title": "Simple Scan",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A simple scan is performed to get a security baseline. In case the test is done in under 10 minutes, it should be part of the build and deployment process."
                        ]
                    },
                    {
                        "title": "Usage of different roles",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Integration of authentication with all roles used in the service."
                        ]
                    },
                    {
                        "title": "Usage of multiple scanners",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of multiple spiders and scanner enhance the coverage and the vulnerabilities."
                        ]
                    }
                ]
            },
            {
                "id": "A21",
                "title": "Dynamic depth for infrastructure",
                "description": "Dynamic depth for infrastructure involves the real-time assessment and monitoring of infrastructure components, such as servers, networks, and databases. This includes using tools like intrusion detection systems (IDS) and continuous monitoring to detect and respond to threats.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Load tests",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Load test against the production system or a production near system is performed."
                        ]
                    },
                    {
                        "title": "Test for exposed services",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "With the help of tools the network configuration of unintentional exposed cluster(s) are tested. To identify clusters, all subdomains might need to be identified with a tool like OWASP Amass to perform port scans based o the result."
                        ]
                    },
                    {
                        "title": "Test for unauthorized installation",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Components must be whitelisted. Regular scans on the docker infrastructure (e.g. cluster) need to be performed, to verify that only standardized base images are used."
                        ]
                    },
                    {
                        "title": "Test for unused Resources",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test for unused resources helps to identify unused resources."
                        ]
                    },
                    {
                        "title": "Test network segmentation",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Cluster internal test needs to be performed. Integration of fine granulated network segmentation (also between pods in the same namespace)."
                        ]
                    },
                    {
                        "title": "Test of the configuration of cloud environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "With the help of tools the configuration of virtual environments are tested."
                        ]
                    },
                    {
                        "title": "Weak password test",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Automatic brute force attacks are performed. Specially the usage of standard accounts like 'admin' and employee user-ids is recommended."
                        ]
                    }
                ]
            },
            {
                "id": "A40",
                "title": "Static depth for applications",
                "description": "Static depth for applications involves analyzing the source code of applications without executing them. This includes static application security testing (SAST) to identify vulnerabilities and coding errors early in the development process.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "API design validation",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Design contract-first APIs using an interface description language such as OpenAPI, AsyncAPI or SOAP and validate the specification using specific tools. Checks should be integrated in IDEs and CI/CD pipelines."
                        ]
                    },
                    {
                        "title": "Dead code elimination",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Collection of unused code and then manual removal of unused code."
                        ]
                    },
                    {
                        "title": "Exclusion of source code duplicates",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Automatic Detection and manual removal of duplicates in source code."
                        ]
                    },
                    {
                        "title": "Exploit likelihood estimation",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Estimate the likelihood of exploitation by using data (CISA KEV) from the past or prediction models (EPSS)."
                        ]
                    },
                    {
                        "title": "Local development security checks performed",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Integration of quality and linting plugins with interactive development environment (IDEs). Implement pre-commit checks to prevent secrets & other security issues being commit to source code."
                        ]
                    },
                    {
                        "title": "Software Composition Analysis (client side)",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Tests for known vulnerabilities in components via Software Composition Analysis of the frontend are performed."
                        ]
                    },
                    {
                        "title": "Software Composition Analysis (server side)",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Use a tool like trivy and concentrate on application related vulnerabilities. At this stage, ignore vulnerabilities in container base images used in the service.",
                        "mitigation_measures": [
                            "Tests for known vulnerabilities in server side components (e.g. backend/middleware) are performed."
                        ]
                    },
                    {
                        "title": "Static analysis for all components/libraries",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of a static analysis for all used components."
                        ]
                    },
                    {
                        "title": "Static analysis for all self written components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of static analysis tools for all parts of the middleware and frontend. Static analysis uses for example string matching algorithms and/or dataflow analysis."
                        ]
                    },
                    {
                        "title": "Static analysis for important client side components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of static analysis tools for important parts of the frontend are used. Static analysis uses for example string matching algorithms and/or dataflow analysis."
                        ]
                    },
                    {
                        "title": "Static analysis for important server side components",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of static analysis tools for important parts of the middleware are used. Static analysis uses for example string matching algorithms and/or dataflow analysis."
                        ]
                    },
                    {
                        "title": "Stylistic analysis",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Analysis of compliance to style guides of the source code ensures that source code formatting rules are met (e.g. indentation, loops, ...)."
                        ]
                    },
                    {
                        "title": "Test for Patch Deployment Time",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test of the Patch Deployment Time. This activity is not repeated in the Sub-Dimension \"Static depth for infrastructure\", but it applies to infrastructure as well."
                        ]
                    },
                    {
                        "title": "Test for Time to Patch",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test of the Time to Patch (e.g. based on Mean Time to Close automatic PRs) This activity is not repeated in the Sub-Dimension \"Static depth for infrastructure\", but it applies to infrastructure as well."
                        ]
                    },
                    {
                        "title": "Test libyear",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test `libyear`, which provides a good insight how good patch management is."
                        ]
                    },
                    {
                        "title": "Usage of multiple analyzers",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Usage of multiple static tools to find more vulnerabilities."
                        ]
                    }
                ]
            },
            {
                "id": "A41",
                "title": "Static depth for infrastructure",
                "description": "Static depth for infrastructure involves assessing the configuration and setup of infrastructure components without real-time execution. This includes reviewing configuration files, network settings, and security policies to ensure they meet security standards.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Analyze logs",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Check logs for keywords."
                        ]
                    },
                    {
                        "title": "Correlate known vulnerabilities in infrastructure with new image versions",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "TODO"
                        ]
                    },
                    {
                        "title": "Software Composition Analysis",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "Subscribing to Github projects and reading release notes might help. Software Composition Analysis for infrastructure might help, but is often too fine-granular.",
                        "mitigation_measures": [
                            "Check for known vulnerabilities"
                        ]
                    },
                    {
                        "title": "Test cluster deployment resources",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test the deployment configuration for virtualized environments for unsecured configurations."
                        ]
                    },
                    {
                        "title": "Test for image lifetime",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Check the image age of containers in production."
                        ]
                    },
                    {
                        "title": "Test for malware",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Check for malware in components (e.g. container images, VM baseline images, libraries)."
                        ]
                    },
                    {
                        "title": "Test for new image version",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Check for new images of containers in production."
                        ]
                    },
                    {
                        "title": "Test for stored secrets",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test for secrets in code, container images and history"
                        ]
                    },
                    {
                        "title": "Test of infrastructure components for known vulnerabilities",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test for known vulnerabilities in infrastructure components. Often, the only way to respond to known vulnerabilities in operating system packages is to accept the risk and wait for a patch. As the patch needs to be applied fast when it is available, this activity depends on 'Usage of a maximum life for images'."
                        ]
                    },
                    {
                        "title": "Test of virtualized environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test virtualized environments for unsecured configurations."
                        ]
                    },
                    {
                        "title": "Test the cloud configuration",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "With the help of tools, the configuration of virtual environments are tested."
                        ]
                    },
                    {
                        "title": "Test the definition of virtualized environments",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Test the definition of virtualized environments for unsecured configurations."
                        ]
                    }
                ]
            },
            {
                "id": "A42",
                "title": "Test-Intensity",
                "description": "Test-intensity refers to the rigor and frequency of testing conducted to ensure the security and functionality of software applications and systems. This includes performing extensive and repeated tests, such as automated security scans, penetration testing, and load testing, to identify and mitigate risks.",
                "isCompleted": false,
                "controls": [
                    {
                        "title": "Creation and application of a testing concept",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A testing concept considering the amount of time per scan/intensity is created and applied. A dynamic analysis needs more time than a static analysis. The dynamic scan, depending on the test intensity might be performed on every commit, every night, every week or once in a month."
                        ]
                    },
                    {
                        "title": "Deactivating of unneeded tests",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "Unneeded tests are deactivated. For example in case the service is using a Mongo database and no mysql database, the dynamic scan doesn't need to test for sql injections."
                        ]
                    },
                    {
                        "title": "Default settings for intensity",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "The intensity of the used tools are not modified to save time."
                        ]
                    },
                    {
                        "title": "High test intensity",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "A deep scan with high test intensity and a low confidence threshold is performed."
                        ]
                    },
                    {
                        "title": "Regular automated tests",
                        "category": "DSOMM",
                        "isCompleted": false,
                        "description": "nan",
                        "mitigation_measures": [
                            "On each push and/or at given intervals automatic security tests are performed."
                        ]
                    }
                ]
            }
        ]
    }
]